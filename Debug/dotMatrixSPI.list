
dotMatrixSPI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021c0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08002348  08002348  00012348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002384  08002384  00020404  2**0
                  CONTENTS
  4 .ARM          00000000  08002384  08002384  00020404  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002384  08002384  00020404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002384  08002384  00012384  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002388  08002388  00012388  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000404  20000000  0800238c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020404  2**0
                  CONTENTS
 10 .bss          000000c0  20000404  20000404  00020404  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004c4  200004c4  00020404  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020404  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004350  00000000  00000000  00020434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000fd9  00000000  00000000  00024784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000440  00000000  00000000  00025760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000003a8  00000000  00000000  00025ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001905d  00000000  00000000  00025f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000058d9  00000000  00000000  0003efa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009227c  00000000  00000000  0004487e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000d6afa  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000ef0  00000000  00000000  000d6b4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000404 	.word	0x20000404
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002330 	.word	0x08002330

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000408 	.word	0x20000408
 80001c4:	08002330 	.word	0x08002330

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 fb66 	bl	800089c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f80e 	bl	80001f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f852 	bl	800027c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  
  max_init (0x03);
 80001d8:	2003      	movs	r0, #3
 80001da:	f000 fab5 	bl	8000748 <max_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//		scroll_char ('P', 200, right); 
		scroll_string ((uint8_t *) "Sensor x ", 10, left); //text, ms, direction
 80001de:	224c      	movs	r2, #76	; 0x4c
 80001e0:	210a      	movs	r1, #10
 80001e2:	4802      	ldr	r0, [pc, #8]	; (80001ec <main+0x24>)
 80001e4:	f000 f9f8 	bl	80005d8 <scroll_string>
 80001e8:	e7f9      	b.n	80001de <main+0x16>
 80001ea:	bf00      	nop
 80001ec:	08002348 	.word	0x08002348

080001f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b090      	sub	sp, #64	; 0x40
 80001f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001f6:	f107 0318 	add.w	r3, r7, #24
 80001fa:	2228      	movs	r2, #40	; 0x28
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f002 f88e 	bl	8002320 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000204:	1d3b      	adds	r3, r7, #4
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
 800020a:	605a      	str	r2, [r3, #4]
 800020c:	609a      	str	r2, [r3, #8]
 800020e:	60da      	str	r2, [r3, #12]
 8000210:	611a      	str	r2, [r3, #16]

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000212:	2301      	movs	r3, #1
 8000214:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000216:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800021a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800021c:	2300      	movs	r3, #0
 800021e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000220:	2301      	movs	r3, #1
 8000222:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000224:	2302      	movs	r3, #2
 8000226:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000228:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800022c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800022e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000232:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000234:	f107 0318 	add.w	r3, r7, #24
 8000238:	4618      	mov	r0, r3
 800023a:	f000 fe29 	bl	8000e90 <HAL_RCC_OscConfig>
 800023e:	4603      	mov	r3, r0
 8000240:	2b00      	cmp	r3, #0
 8000242:	d001      	beq.n	8000248 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000244:	f000 f858 	bl	80002f8 <Error_Handler>
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000248:	230f      	movs	r3, #15
 800024a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800024c:	2302      	movs	r3, #2
 800024e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000250:	2300      	movs	r3, #0
 8000252:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000254:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000258:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800025e:	1d3b      	adds	r3, r7, #4
 8000260:	2102      	movs	r1, #2
 8000262:	4618      	mov	r0, r3
 8000264:	f001 fe52 	bl	8001f0c <HAL_RCC_ClockConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800026e:	f000 f843 	bl	80002f8 <Error_Handler>
  }
}
 8000272:	bf00      	nop
 8000274:	3740      	adds	r7, #64	; 0x40
 8000276:	46bd      	mov	sp, r7
 8000278:	bd80      	pop	{r7, pc}
	...

0800027c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b088      	sub	sp, #32
 8000280:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000282:	f107 030c 	add.w	r3, r7, #12
 8000286:	2200      	movs	r2, #0
 8000288:	601a      	str	r2, [r3, #0]
 800028a:	605a      	str	r2, [r3, #4]
 800028c:	609a      	str	r2, [r3, #8]
 800028e:	60da      	str	r2, [r3, #12]
 8000290:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000292:	4b18      	ldr	r3, [pc, #96]	; (80002f4 <MX_GPIO_Init+0x78>)
 8000294:	695b      	ldr	r3, [r3, #20]
 8000296:	4a17      	ldr	r2, [pc, #92]	; (80002f4 <MX_GPIO_Init+0x78>)
 8000298:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800029c:	6153      	str	r3, [r2, #20]
 800029e:	4b15      	ldr	r3, [pc, #84]	; (80002f4 <MX_GPIO_Init+0x78>)
 80002a0:	695b      	ldr	r3, [r3, #20]
 80002a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80002a6:	60bb      	str	r3, [r7, #8]
 80002a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002aa:	4b12      	ldr	r3, [pc, #72]	; (80002f4 <MX_GPIO_Init+0x78>)
 80002ac:	695b      	ldr	r3, [r3, #20]
 80002ae:	4a11      	ldr	r2, [pc, #68]	; (80002f4 <MX_GPIO_Init+0x78>)
 80002b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002b4:	6153      	str	r3, [r2, #20]
 80002b6:	4b0f      	ldr	r3, [pc, #60]	; (80002f4 <MX_GPIO_Init+0x78>)
 80002b8:	695b      	ldr	r3, [r3, #20]
 80002ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80002be:	607b      	str	r3, [r7, #4]
 80002c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80002c2:	2200      	movs	r2, #0
 80002c4:	211c      	movs	r1, #28
 80002c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ca:	f000 fdc9 	bl	8000e60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80002ce:	231c      	movs	r3, #28
 80002d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002d2:	2301      	movs	r3, #1
 80002d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d6:	2300      	movs	r3, #0
 80002d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002da:	2300      	movs	r3, #0
 80002dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002de:	f107 030c 	add.w	r3, r7, #12
 80002e2:	4619      	mov	r1, r3
 80002e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e8:	f000 fc48 	bl	8000b7c <HAL_GPIO_Init>

}
 80002ec:	bf00      	nop
 80002ee:	3720      	adds	r7, #32
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	40021000 	.word	0x40021000

080002f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002f8:	b480      	push	{r7}
 80002fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80002fc:	bf00      	nop
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr

08000306 <write_byte>:
};



void write_byte (uint8_t byte)
{
 8000306:	b580      	push	{r7, lr}
 8000308:	b084      	sub	sp, #16
 800030a:	af00      	add	r7, sp, #0
 800030c:	4603      	mov	r3, r0
 800030e:	71fb      	strb	r3, [r7, #7]
	for (int i =0; i<8; i++)
 8000310:	2300      	movs	r3, #0
 8000312:	60fb      	str	r3, [r7, #12]
 8000314:	e01b      	b.n	800034e <write_byte+0x48>
	{
		HAL_GPIO_WritePin (maxport, clock_Pin, 0);  // pull the clock pin low
 8000316:	2200      	movs	r2, #0
 8000318:	2110      	movs	r1, #16
 800031a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800031e:	f000 fd9f 	bl	8000e60 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin (maxport, data_Pin, byte&0x80);  // write the MS0b bit to the data pin
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000328:	b2db      	uxtb	r3, r3
 800032a:	461a      	mov	r2, r3
 800032c:	2104      	movs	r1, #4
 800032e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000332:	f000 fd95 	bl	8000e60 <HAL_GPIO_WritePin>
		byte = byte<<1;  // shift left
 8000336:	79fb      	ldrb	r3, [r7, #7]
 8000338:	005b      	lsls	r3, r3, #1
 800033a:	71fb      	strb	r3, [r7, #7]
		HAL_GPIO_WritePin (maxport, clock_Pin, 1);  // pull the clock pin HIGH
 800033c:	2201      	movs	r2, #1
 800033e:	2110      	movs	r1, #16
 8000340:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000344:	f000 fd8c 	bl	8000e60 <HAL_GPIO_WritePin>
	for (int i =0; i<8; i++)
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	3301      	adds	r3, #1
 800034c:	60fb      	str	r3, [r7, #12]
 800034e:	68fb      	ldr	r3, [r7, #12]
 8000350:	2b07      	cmp	r3, #7
 8000352:	dde0      	ble.n	8000316 <write_byte+0x10>
	}
}
 8000354:	bf00      	nop
 8000356:	bf00      	nop
 8000358:	3710      	adds	r7, #16
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}

0800035e <write_max_cmd>:


void write_max_cmd (uint8_t address, uint8_t cmd)
{
 800035e:	b580      	push	{r7, lr}
 8000360:	b084      	sub	sp, #16
 8000362:	af00      	add	r7, sp, #0
 8000364:	4603      	mov	r3, r0
 8000366:	460a      	mov	r2, r1
 8000368:	71fb      	strb	r3, [r7, #7]
 800036a:	4613      	mov	r3, r2
 800036c:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 800036e:	2200      	movs	r2, #0
 8000370:	2108      	movs	r1, #8
 8000372:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000376:	f000 fd73 	bl	8000e60 <HAL_GPIO_WritePin>
	for (int i=0;i<num; i++)
 800037a:	2300      	movs	r3, #0
 800037c:	60fb      	str	r3, [r7, #12]
 800037e:	e00a      	b.n	8000396 <write_max_cmd+0x38>
	{
		write_byte (address);
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	4618      	mov	r0, r3
 8000384:	f7ff ffbf 	bl	8000306 <write_byte>
		write_byte (cmd); 
 8000388:	79bb      	ldrb	r3, [r7, #6]
 800038a:	4618      	mov	r0, r3
 800038c:	f7ff ffbb 	bl	8000306 <write_byte>
	for (int i=0;i<num; i++)
 8000390:	68fb      	ldr	r3, [r7, #12]
 8000392:	3301      	adds	r3, #1
 8000394:	60fb      	str	r3, [r7, #12]
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	2b03      	cmp	r3, #3
 800039a:	ddf1      	ble.n	8000380 <write_max_cmd+0x22>
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW
 800039c:	2200      	movs	r2, #0
 800039e:	2108      	movs	r1, #8
 80003a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003a4:	f000 fd5c 	bl	8000e60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH
 80003a8:	2201      	movs	r2, #1
 80003aa:	2108      	movs	r1, #8
 80003ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b0:	f000 fd56 	bl	8000e60 <HAL_GPIO_WritePin>
}
 80003b4:	bf00      	nop
 80003b6:	3710      	adds	r7, #16
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}

080003bc <setled>:


void setled(uint8_t row, uint8_t col, uint8_t value)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b086      	sub	sp, #24
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4603      	mov	r3, r0
 80003c4:	71fb      	strb	r3, [r7, #7]
 80003c6:	460b      	mov	r3, r1
 80003c8:	71bb      	strb	r3, [r7, #6]
 80003ca:	4613      	mov	r3, r2
 80003cc:	717b      	strb	r3, [r7, #5]
  bitWrite(buffer[col], row, value);
 80003ce:	797b      	ldrb	r3, [r7, #5]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d00d      	beq.n	80003f0 <setled+0x34>
 80003d4:	79bb      	ldrb	r3, [r7, #6]
 80003d6:	4a2e      	ldr	r2, [pc, #184]	; (8000490 <setled+0xd4>)
 80003d8:	5cd1      	ldrb	r1, [r2, r3]
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	2201      	movs	r2, #1
 80003de:	fa02 f303 	lsl.w	r3, r2, r3
 80003e2:	b2da      	uxtb	r2, r3
 80003e4:	79bb      	ldrb	r3, [r7, #6]
 80003e6:	430a      	orrs	r2, r1
 80003e8:	b2d1      	uxtb	r1, r2
 80003ea:	4a29      	ldr	r2, [pc, #164]	; (8000490 <setled+0xd4>)
 80003ec:	54d1      	strb	r1, [r2, r3]
 80003ee:	e00e      	b.n	800040e <setled+0x52>
 80003f0:	79bb      	ldrb	r3, [r7, #6]
 80003f2:	4a27      	ldr	r2, [pc, #156]	; (8000490 <setled+0xd4>)
 80003f4:	5cd1      	ldrb	r1, [r2, r3]
 80003f6:	79fb      	ldrb	r3, [r7, #7]
 80003f8:	2201      	movs	r2, #1
 80003fa:	fa02 f303 	lsl.w	r3, r2, r3
 80003fe:	b2db      	uxtb	r3, r3
 8000400:	43db      	mvns	r3, r3
 8000402:	b2da      	uxtb	r2, r3
 8000404:	79bb      	ldrb	r3, [r7, #6]
 8000406:	400a      	ands	r2, r1
 8000408:	b2d1      	uxtb	r1, r2
 800040a:	4a21      	ldr	r2, [pc, #132]	; (8000490 <setled+0xd4>)
 800040c:	54d1      	strb	r1, [r2, r3]

	int n = col / 8;
 800040e:	79bb      	ldrb	r3, [r7, #6]
 8000410:	08db      	lsrs	r3, r3, #3
 8000412:	b2db      	uxtb	r3, r3
 8000414:	613b      	str	r3, [r7, #16]
	int c = col % 8;
 8000416:	79bb      	ldrb	r3, [r7, #6]
 8000418:	f003 0307 	and.w	r3, r3, #7
 800041c:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW    
 800041e:	2200      	movs	r2, #0
 8000420:	2108      	movs	r1, #8
 8000422:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000426:	f000 fd1b 	bl	8000e60 <HAL_GPIO_WritePin>
	for (int i=0; i<num; i++) 
 800042a:	2300      	movs	r3, #0
 800042c:	617b      	str	r3, [r7, #20]
 800042e:	e01c      	b.n	800046a <setled+0xae>
	{
		if (i == (num-(n+1)))
 8000430:	693b      	ldr	r3, [r7, #16]
 8000432:	f1c3 0303 	rsb	r3, r3, #3
 8000436:	697a      	ldr	r2, [r7, #20]
 8000438:	429a      	cmp	r2, r3
 800043a:	d10d      	bne.n	8000458 <setled+0x9c>
		{
			write_byte (((c+1)));
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	b2db      	uxtb	r3, r3
 8000440:	3301      	adds	r3, #1
 8000442:	b2db      	uxtb	r3, r3
 8000444:	4618      	mov	r0, r3
 8000446:	f7ff ff5e 	bl	8000306 <write_byte>
			write_byte (buffer[col]);
 800044a:	79bb      	ldrb	r3, [r7, #6]
 800044c:	4a10      	ldr	r2, [pc, #64]	; (8000490 <setled+0xd4>)
 800044e:	5cd3      	ldrb	r3, [r2, r3]
 8000450:	4618      	mov	r0, r3
 8000452:	f7ff ff58 	bl	8000306 <write_byte>
 8000456:	e005      	b.n	8000464 <setled+0xa8>
		}
		else
		{
			write_byte (0);
 8000458:	2000      	movs	r0, #0
 800045a:	f7ff ff54 	bl	8000306 <write_byte>
			write_byte (0);
 800045e:	2000      	movs	r0, #0
 8000460:	f7ff ff51 	bl	8000306 <write_byte>
	for (int i=0; i<num; i++) 
 8000464:	697b      	ldr	r3, [r7, #20]
 8000466:	3301      	adds	r3, #1
 8000468:	617b      	str	r3, [r7, #20]
 800046a:	697b      	ldr	r3, [r7, #20]
 800046c:	2b03      	cmp	r3, #3
 800046e:	dddf      	ble.n	8000430 <setled+0x74>
		}
	}
	HAL_GPIO_WritePin (maxport, cs_Pin, 0);  // pull the CS pin LOW 
 8000470:	2200      	movs	r2, #0
 8000472:	2108      	movs	r1, #8
 8000474:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000478:	f000 fcf2 	bl	8000e60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (maxport, cs_Pin, 1);  // pull the CS pin HIGH 
 800047c:	2201      	movs	r2, #1
 800047e:	2108      	movs	r1, #8
 8000480:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000484:	f000 fcec 	bl	8000e60 <HAL_GPIO_WritePin>
}
 8000488:	bf00      	nop
 800048a:	3718      	adds	r7, #24
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}
 8000490:	20000420 	.word	0x20000420

08000494 <setrow>:


void setrow(uint8_t row, uint8_t value)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b088      	sub	sp, #32
 8000498:	af00      	add	r7, sp, #0
 800049a:	4603      	mov	r3, r0
 800049c:	460a      	mov	r2, r1
 800049e:	71fb      	strb	r3, [r7, #7]
 80004a0:	4613      	mov	r3, r2
 80004a2:	71bb      	strb	r3, [r7, #6]
	int n = row / 8;
 80004a4:	79fb      	ldrb	r3, [r7, #7]
 80004a6:	08db      	lsrs	r3, r3, #3
 80004a8:	b2db      	uxtb	r3, r3
 80004aa:	617b      	str	r3, [r7, #20]
	int r = row % 8;
 80004ac:	79fb      	ldrb	r3, [r7, #7]
 80004ae:	f003 0307 	and.w	r3, r3, #7
 80004b2:	613b      	str	r3, [r7, #16]
	
	uint8_t store = value;
 80004b4:	79bb      	ldrb	r3, [r7, #6]
 80004b6:	73fb      	strb	r3, [r7, #15]
	for (int i=0; i<num; i++) 
 80004b8:	2300      	movs	r3, #0
 80004ba:	61fb      	str	r3, [r7, #28]
 80004bc:	e02d      	b.n	800051a <setrow+0x86>
	{
		if (i == ((n)))
 80004be:	69fa      	ldr	r2, [r7, #28]
 80004c0:	697b      	ldr	r3, [r7, #20]
 80004c2:	429a      	cmp	r2, r3
 80004c4:	d120      	bne.n	8000508 <setrow+0x74>
		{
//			for (int col=0+(8*n); col<8+(8*n); col++)  // uncomment this if the character looks inverted about X axis
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 80004c6:	697b      	ldr	r3, [r7, #20]
 80004c8:	00db      	lsls	r3, r3, #3
 80004ca:	3307      	adds	r3, #7
 80004cc:	61bb      	str	r3, [r7, #24]
 80004ce:	e015      	b.n	80004fc <setrow+0x68>
			{
				bool b = value&0x80;
 80004d0:	79bb      	ldrb	r3, [r7, #6]
 80004d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	bf14      	ite	ne
 80004da:	2301      	movne	r3, #1
 80004dc:	2300      	moveq	r3, #0
 80004de:	73bb      	strb	r3, [r7, #14]
				setled (r, col, b);
 80004e0:	693b      	ldr	r3, [r7, #16]
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	69ba      	ldr	r2, [r7, #24]
 80004e6:	b2d1      	uxtb	r1, r2
 80004e8:	7bba      	ldrb	r2, [r7, #14]
 80004ea:	4618      	mov	r0, r3
 80004ec:	f7ff ff66 	bl	80003bc <setled>
				value<<=1;
 80004f0:	79bb      	ldrb	r3, [r7, #6]
 80004f2:	005b      	lsls	r3, r3, #1
 80004f4:	71bb      	strb	r3, [r7, #6]
		for (int col=(7-0)+(8*n); col>=0+(8*n); col--)
 80004f6:	69bb      	ldr	r3, [r7, #24]
 80004f8:	3b01      	subs	r3, #1
 80004fa:	61bb      	str	r3, [r7, #24]
 80004fc:	697b      	ldr	r3, [r7, #20]
 80004fe:	00db      	lsls	r3, r3, #3
 8000500:	69ba      	ldr	r2, [r7, #24]
 8000502:	429a      	cmp	r2, r3
 8000504:	dae4      	bge.n	80004d0 <setrow+0x3c>
 8000506:	e005      	b.n	8000514 <setrow+0x80>
			}
		}
		else
		{
			write_byte (0);
 8000508:	2000      	movs	r0, #0
 800050a:	f7ff fefc 	bl	8000306 <write_byte>
			write_byte (0);
 800050e:	2000      	movs	r0, #0
 8000510:	f7ff fef9 	bl	8000306 <write_byte>
	for (int i=0; i<num; i++) 
 8000514:	69fb      	ldr	r3, [r7, #28]
 8000516:	3301      	adds	r3, #1
 8000518:	61fb      	str	r3, [r7, #28]
 800051a:	69fb      	ldr	r3, [r7, #28]
 800051c:	2b03      	cmp	r3, #3
 800051e:	ddce      	ble.n	80004be <setrow+0x2a>
		}
	}
	buffer_row[row] = store;
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	4903      	ldr	r1, [pc, #12]	; (8000530 <setrow+0x9c>)
 8000524:	7bfa      	ldrb	r2, [r7, #15]
 8000526:	54ca      	strb	r2, [r1, r3]
}
 8000528:	bf00      	nop
 800052a:	3720      	adds	r7, #32
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	20000470 	.word	0x20000470

08000534 <shift_char>:
					break;
			}			
}	
		
void shift_char (char c, uint32_t speed, char direction)  
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b086      	sub	sp, #24
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	6039      	str	r1, [r7, #0]
 800053e:	71fb      	strb	r3, [r7, #7]
 8000540:	4613      	mov	r3, r2
 8000542:	71bb      	strb	r3, [r7, #6]
	int width = CH[8*c];
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	00db      	lsls	r3, r3, #3
 8000548:	4a22      	ldr	r2, [pc, #136]	; (80005d4 <shift_char+0xa0>)
 800054a:	5cd3      	ldrb	r3, [r2, r3]
 800054c:	60fb      	str	r3, [r7, #12]
	int start= (8*c)+1;
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	00db      	lsls	r3, r3, #3
 8000552:	3301      	adds	r3, #1
 8000554:	60bb      	str	r3, [r7, #8]

		switch (direction)
 8000556:	79bb      	ldrb	r3, [r7, #6]
 8000558:	2b4c      	cmp	r3, #76	; 0x4c
 800055a:	d002      	beq.n	8000562 <shift_char+0x2e>
 800055c:	2b52      	cmp	r3, #82	; 0x52
 800055e:	d01a      	beq.n	8000596 <shift_char+0x62>
						HAL_Delay (speed);
					}
					break;
			
				default :
					break;
 8000560:	e034      	b.n	80005cc <shift_char+0x98>
					for (int j=start; j<(start+width+1); j++)
 8000562:	68bb      	ldr	r3, [r7, #8]
 8000564:	617b      	str	r3, [r7, #20]
 8000566:	e00f      	b.n	8000588 <shift_char+0x54>
						setrow (0, CH[j]);
 8000568:	4a1a      	ldr	r2, [pc, #104]	; (80005d4 <shift_char+0xa0>)
 800056a:	697b      	ldr	r3, [r7, #20]
 800056c:	4413      	add	r3, r2
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	4619      	mov	r1, r3
 8000572:	2000      	movs	r0, #0
 8000574:	f7ff ff8e 	bl	8000494 <setrow>
						shiftleft();
 8000578:	f000 f878 	bl	800066c <shiftleft>
						HAL_Delay (speed);
 800057c:	6838      	ldr	r0, [r7, #0]
 800057e:	f000 f9f3 	bl	8000968 <HAL_Delay>
					for (int j=start; j<(start+width+1); j++)
 8000582:	697b      	ldr	r3, [r7, #20]
 8000584:	3301      	adds	r3, #1
 8000586:	617b      	str	r3, [r7, #20]
 8000588:	68ba      	ldr	r2, [r7, #8]
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	4413      	add	r3, r2
 800058e:	697a      	ldr	r2, [r7, #20]
 8000590:	429a      	cmp	r2, r3
 8000592:	dde9      	ble.n	8000568 <shift_char+0x34>
						break;
 8000594:	e01a      	b.n	80005cc <shift_char+0x98>
					for (int j=start+width+1; j>=(start); j--)
 8000596:	68ba      	ldr	r2, [r7, #8]
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	4413      	add	r3, r2
 800059c:	3301      	adds	r3, #1
 800059e:	613b      	str	r3, [r7, #16]
 80005a0:	e00f      	b.n	80005c2 <shift_char+0x8e>
						setrow ((num*8)-1, CH[j]);
 80005a2:	4a0c      	ldr	r2, [pc, #48]	; (80005d4 <shift_char+0xa0>)
 80005a4:	693b      	ldr	r3, [r7, #16]
 80005a6:	4413      	add	r3, r2
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	4619      	mov	r1, r3
 80005ac:	201f      	movs	r0, #31
 80005ae:	f7ff ff71 	bl	8000494 <setrow>
						shiftright();
 80005b2:	f000 f893 	bl	80006dc <shiftright>
						HAL_Delay (speed);
 80005b6:	6838      	ldr	r0, [r7, #0]
 80005b8:	f000 f9d6 	bl	8000968 <HAL_Delay>
					for (int j=start+width+1; j>=(start); j--)
 80005bc:	693b      	ldr	r3, [r7, #16]
 80005be:	3b01      	subs	r3, #1
 80005c0:	613b      	str	r3, [r7, #16]
 80005c2:	693a      	ldr	r2, [r7, #16]
 80005c4:	68bb      	ldr	r3, [r7, #8]
 80005c6:	429a      	cmp	r2, r3
 80005c8:	daeb      	bge.n	80005a2 <shift_char+0x6e>
					break;
 80005ca:	bf00      	nop
			}
}
 80005cc:	bf00      	nop
 80005ce:	3718      	adds	r7, #24
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000000 	.word	0x20000000

080005d8 <scroll_string>:



void scroll_string (uint8_t *string, uint32_t speed, char direction)
{	
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	60f8      	str	r0, [r7, #12]
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	4613      	mov	r3, r2
 80005e4:	71fb      	strb	r3, [r7, #7]
	while (*string != 0) 
 80005e6:	e009      	b.n	80005fc <scroll_string+0x24>
	{	
		shift_char (*string, speed, direction);
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	79fa      	ldrb	r2, [r7, #7]
 80005ee:	68b9      	ldr	r1, [r7, #8]
 80005f0:	4618      	mov	r0, r3
 80005f2:	f7ff ff9f 	bl	8000534 <shift_char>
		string++;
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	3301      	adds	r3, #1
 80005fa:	60fb      	str	r3, [r7, #12]
	while (*string != 0) 
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d1f1      	bne.n	80005e8 <scroll_string+0x10>
  }
}
 8000604:	bf00      	nop
 8000606:	bf00      	nop
 8000608:	3710      	adds	r7, #16
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
	...

08000610 <max_clear>:



void max_clear(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
	for (int i=0; i<num*8; i++) 
 8000616:	2300      	movs	r3, #0
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	e008      	b.n	800062e <max_clear+0x1e>
		setrow(i,0);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	b2db      	uxtb	r3, r3
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f7ff ff36 	bl	8000494 <setrow>
	for (int i=0; i<num*8; i++) 
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	3301      	adds	r3, #1
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2b1f      	cmp	r3, #31
 8000632:	ddf3      	ble.n	800061c <max_clear+0xc>
		
	for (int i=0; i<80; i++)
 8000634:	2300      	movs	r3, #0
 8000636:	603b      	str	r3, [r7, #0]
 8000638:	e00c      	b.n	8000654 <max_clear+0x44>
	{
		buffer[i] = 0;
 800063a:	4a0a      	ldr	r2, [pc, #40]	; (8000664 <max_clear+0x54>)
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	4413      	add	r3, r2
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	  buffer_row[i] = 0;
 8000644:	4a08      	ldr	r2, [pc, #32]	; (8000668 <max_clear+0x58>)
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	4413      	add	r3, r2
 800064a:	2200      	movs	r2, #0
 800064c:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<80; i++)
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	3301      	adds	r3, #1
 8000652:	603b      	str	r3, [r7, #0]
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	2b4f      	cmp	r3, #79	; 0x4f
 8000658:	ddef      	ble.n	800063a <max_clear+0x2a>
	}
}
 800065a:	bf00      	nop
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000420 	.word	0x20000420
 8000668:	20000470 	.word	0x20000470

0800066c <shiftleft>:



void shiftleft(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
	int last = num*8-1;
 8000672:	231f      	movs	r3, #31
 8000674:	60bb      	str	r3, [r7, #8]
	uint8_t old = buffer_row[last];
 8000676:	4a18      	ldr	r2, [pc, #96]	; (80006d8 <shiftleft+0x6c>)
 8000678:	68bb      	ldr	r3, [r7, #8]
 800067a:	4413      	add	r3, r2
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	71fb      	strb	r3, [r7, #7]
	int i;
	for (i=0; i<num*8; i++)
 8000680:	2300      	movs	r3, #0
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	e00c      	b.n	80006a0 <shiftleft+0x34>
	{
		setrow(i, buffer_row[i]);
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	b2da      	uxtb	r2, r3
 800068a:	4913      	ldr	r1, [pc, #76]	; (80006d8 <shiftleft+0x6c>)
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	440b      	add	r3, r1
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	4619      	mov	r1, r3
 8000694:	4610      	mov	r0, r2
 8000696:	f7ff fefd 	bl	8000494 <setrow>
	for (i=0; i<num*8; i++)
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	3301      	adds	r3, #1
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	2b1f      	cmp	r3, #31
 80006a4:	ddef      	ble.n	8000686 <shiftleft+0x1a>
	}
	for (i=79; i>0; i--)
 80006a6:	234f      	movs	r3, #79	; 0x4f
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	e00b      	b.n	80006c4 <shiftleft+0x58>
	{
 		buffer_row[i] = buffer_row[i-1];
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	3b01      	subs	r3, #1
 80006b0:	4a09      	ldr	r2, [pc, #36]	; (80006d8 <shiftleft+0x6c>)
 80006b2:	5cd1      	ldrb	r1, [r2, r3]
 80006b4:	4a08      	ldr	r2, [pc, #32]	; (80006d8 <shiftleft+0x6c>)
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	4413      	add	r3, r2
 80006ba:	460a      	mov	r2, r1
 80006bc:	701a      	strb	r2, [r3, #0]
	for (i=79; i>0; i--)
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	3b01      	subs	r3, #1
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	dcf0      	bgt.n	80006ac <shiftleft+0x40>
	}
	
	buffer_row[0] = old;
 80006ca:	4a03      	ldr	r2, [pc, #12]	; (80006d8 <shiftleft+0x6c>)
 80006cc:	79fb      	ldrb	r3, [r7, #7]
 80006ce:	7013      	strb	r3, [r2, #0]
}
 80006d0:	bf00      	nop
 80006d2:	3710      	adds	r7, #16
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000470 	.word	0x20000470

080006dc <shiftright>:


void shiftright(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
	int last = num*8-1;	
 80006e2:	231f      	movs	r3, #31
 80006e4:	607b      	str	r3, [r7, #4]
	uint8_t old = buffer_row[0];
 80006e6:	4b17      	ldr	r3, [pc, #92]	; (8000744 <shiftright+0x68>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	70fb      	strb	r3, [r7, #3]
	
	for (int i=last; i>=0; i--)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	e00c      	b.n	800070c <shiftright+0x30>
	{
		setrow (i, buffer_row[i]);
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	4913      	ldr	r1, [pc, #76]	; (8000744 <shiftright+0x68>)
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	440b      	add	r3, r1
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	4619      	mov	r1, r3
 8000700:	4610      	mov	r0, r2
 8000702:	f7ff fec7 	bl	8000494 <setrow>
	for (int i=last; i>=0; i--)
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	3b01      	subs	r3, #1
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	2b00      	cmp	r3, #0
 8000710:	daef      	bge.n	80006f2 <shiftright+0x16>
	}
	
	for (int i=0; i<80; i++)
 8000712:	2300      	movs	r3, #0
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	e00b      	b.n	8000730 <shiftright+0x54>
	{
		buffer_row[i] = buffer_row[i+1];
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	3301      	adds	r3, #1
 800071c:	4a09      	ldr	r2, [pc, #36]	; (8000744 <shiftright+0x68>)
 800071e:	5cd1      	ldrb	r1, [r2, r3]
 8000720:	4a08      	ldr	r2, [pc, #32]	; (8000744 <shiftright+0x68>)
 8000722:	68bb      	ldr	r3, [r7, #8]
 8000724:	4413      	add	r3, r2
 8000726:	460a      	mov	r2, r1
 8000728:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<80; i++)
 800072a:	68bb      	ldr	r3, [r7, #8]
 800072c:	3301      	adds	r3, #1
 800072e:	60bb      	str	r3, [r7, #8]
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	2b4f      	cmp	r3, #79	; 0x4f
 8000734:	ddf0      	ble.n	8000718 <shiftright+0x3c>
	}
	
	buffer_row[num*8-1] = old;
 8000736:	4a03      	ldr	r2, [pc, #12]	; (8000744 <shiftright+0x68>)
 8000738:	78fb      	ldrb	r3, [r7, #3]
 800073a:	77d3      	strb	r3, [r2, #31]
}
 800073c:	bf00      	nop
 800073e:	3710      	adds	r7, #16
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	20000470 	.word	0x20000470

08000748 <max_init>:



void max_init (uint8_t brightness)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
	write_max_cmd(0x09, 0x00);       //  no decoding
 8000752:	2100      	movs	r1, #0
 8000754:	2009      	movs	r0, #9
 8000756:	f7ff fe02 	bl	800035e <write_max_cmd>
	write_max_cmd(0x0b, 0x07);       //  scan limit = 8 LEDs
 800075a:	2107      	movs	r1, #7
 800075c:	200b      	movs	r0, #11
 800075e:	f7ff fdfe 	bl	800035e <write_max_cmd>
	write_max_cmd(0x0c, 0x01);       //  power down =0,normal mode = 1
 8000762:	2101      	movs	r1, #1
 8000764:	200c      	movs	r0, #12
 8000766:	f7ff fdfa 	bl	800035e <write_max_cmd>
	write_max_cmd(0x0f, 0x00);       //  no test display
 800076a:	2100      	movs	r1, #0
 800076c:	200f      	movs	r0, #15
 800076e:	f7ff fdf6 	bl	800035e <write_max_cmd>
	
	max_clear ();
 8000772:	f7ff ff4d 	bl	8000610 <max_clear>
	
	write_max_cmd(0x0a, brightness);       //  brightness intensity
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	4619      	mov	r1, r3
 800077a:	200a      	movs	r0, #10
 800077c:	f7ff fdef 	bl	800035e <write_max_cmd>
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000788:	b480      	push	{r7}
 800078a:	b083      	sub	sp, #12
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <HAL_MspInit+0x44>)
 8000790:	699b      	ldr	r3, [r3, #24]
 8000792:	4a0e      	ldr	r2, [pc, #56]	; (80007cc <HAL_MspInit+0x44>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6193      	str	r3, [r2, #24]
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <HAL_MspInit+0x44>)
 800079c:	699b      	ldr	r3, [r3, #24]
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <HAL_MspInit+0x44>)
 80007a8:	69db      	ldr	r3, [r3, #28]
 80007aa:	4a08      	ldr	r2, [pc, #32]	; (80007cc <HAL_MspInit+0x44>)
 80007ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b0:	61d3      	str	r3, [r2, #28]
 80007b2:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HAL_MspInit+0x44>)
 80007b4:	69db      	ldr	r3, [r3, #28]
 80007b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007be:	bf00      	nop
 80007c0:	370c      	adds	r7, #12
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	40021000 	.word	0x40021000

080007d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <NMI_Handler+0x4>

080007d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d6:	b480      	push	{r7}
 80007d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007da:	e7fe      	b.n	80007da <HardFault_Handler+0x4>

080007dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <MemManage_Handler+0x4>

080007e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007e2:	b480      	push	{r7}
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007e6:	e7fe      	b.n	80007e6 <BusFault_Handler+0x4>

080007e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007ec:	e7fe      	b.n	80007ec <UsageFault_Handler+0x4>

080007ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ee:	b480      	push	{r7}
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007f2:	bf00      	nop
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000800:	bf00      	nop
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr

0800080a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800080e:	bf00      	nop
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800081c:	f000 f884 	bl	8000928 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}

08000824 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000828:	4b06      	ldr	r3, [pc, #24]	; (8000844 <SystemInit+0x20>)
 800082a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800082e:	4a05      	ldr	r2, [pc, #20]	; (8000844 <SystemInit+0x20>)
 8000830:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000834:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000848:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000880 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800084c:	f7ff ffea 	bl	8000824 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000850:	480c      	ldr	r0, [pc, #48]	; (8000884 <LoopForever+0x6>)
  ldr r1, =_edata
 8000852:	490d      	ldr	r1, [pc, #52]	; (8000888 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000854:	4a0d      	ldr	r2, [pc, #52]	; (800088c <LoopForever+0xe>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000858:	e002      	b.n	8000860 <LoopCopyDataInit>

0800085a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800085a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800085c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085e:	3304      	adds	r3, #4

08000860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000864:	d3f9      	bcc.n	800085a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000866:	4a0a      	ldr	r2, [pc, #40]	; (8000890 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000868:	4c0a      	ldr	r4, [pc, #40]	; (8000894 <LoopForever+0x16>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800086c:	e001      	b.n	8000872 <LoopFillZerobss>

0800086e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000870:	3204      	adds	r2, #4

08000872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000874:	d3fb      	bcc.n	800086e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000876:	f001 fd2f 	bl	80022d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800087a:	f7ff fca5 	bl	80001c8 <main>

0800087e <LoopForever>:

LoopForever:
    b LoopForever
 800087e:	e7fe      	b.n	800087e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000880:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000884:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000888:	20000404 	.word	0x20000404
  ldr r2, =_sidata
 800088c:	0800238c 	.word	0x0800238c
  ldr r2, =_sbss
 8000890:	20000404 	.word	0x20000404
  ldr r4, =_ebss
 8000894:	200004c4 	.word	0x200004c4

08000898 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000898:	e7fe      	b.n	8000898 <ADC1_2_IRQHandler>
	...

0800089c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008a0:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <HAL_Init+0x28>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a07      	ldr	r2, [pc, #28]	; (80008c4 <HAL_Init+0x28>)
 80008a6:	f043 0310 	orr.w	r3, r3, #16
 80008aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008ac:	2003      	movs	r0, #3
 80008ae:	f000 f931 	bl	8000b14 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008b2:	2000      	movs	r0, #0
 80008b4:	f000 f808 	bl	80008c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008b8:	f7ff ff66 	bl	8000788 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008bc:	2300      	movs	r3, #0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40022000 	.word	0x40022000

080008c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008d0:	4b12      	ldr	r3, [pc, #72]	; (800091c <HAL_InitTick+0x54>)
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <HAL_InitTick+0x58>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	4619      	mov	r1, r3
 80008da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008de:	fbb3 f3f1 	udiv	r3, r3, r1
 80008e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 f93b 	bl	8000b62 <HAL_SYSTICK_Config>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
 80008f4:	e00e      	b.n	8000914 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2b0f      	cmp	r3, #15
 80008fa:	d80a      	bhi.n	8000912 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008fc:	2200      	movs	r2, #0
 80008fe:	6879      	ldr	r1, [r7, #4]
 8000900:	f04f 30ff 	mov.w	r0, #4294967295
 8000904:	f000 f911 	bl	8000b2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000908:	4a06      	ldr	r2, [pc, #24]	; (8000924 <HAL_InitTick+0x5c>)
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800090e:	2300      	movs	r3, #0
 8000910:	e000      	b.n	8000914 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000912:	2301      	movs	r3, #1
}
 8000914:	4618      	mov	r0, r3
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	200003f8 	.word	0x200003f8
 8000920:	20000400 	.word	0x20000400
 8000924:	200003fc 	.word	0x200003fc

08000928 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800092c:	4b06      	ldr	r3, [pc, #24]	; (8000948 <HAL_IncTick+0x20>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	461a      	mov	r2, r3
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <HAL_IncTick+0x24>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4413      	add	r3, r2
 8000938:	4a04      	ldr	r2, [pc, #16]	; (800094c <HAL_IncTick+0x24>)
 800093a:	6013      	str	r3, [r2, #0]
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop
 8000948:	20000400 	.word	0x20000400
 800094c:	200004c0 	.word	0x200004c0

08000950 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  return uwTick;  
 8000954:	4b03      	ldr	r3, [pc, #12]	; (8000964 <HAL_GetTick+0x14>)
 8000956:	681b      	ldr	r3, [r3, #0]
}
 8000958:	4618      	mov	r0, r3
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	200004c0 	.word	0x200004c0

08000968 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000970:	f7ff ffee 	bl	8000950 <HAL_GetTick>
 8000974:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000980:	d005      	beq.n	800098e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000982:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <HAL_Delay+0x44>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	461a      	mov	r2, r3
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	4413      	add	r3, r2
 800098c:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800098e:	bf00      	nop
 8000990:	f7ff ffde 	bl	8000950 <HAL_GetTick>
 8000994:	4602      	mov	r2, r0
 8000996:	68bb      	ldr	r3, [r7, #8]
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	68fa      	ldr	r2, [r7, #12]
 800099c:	429a      	cmp	r2, r3
 800099e:	d8f7      	bhi.n	8000990 <HAL_Delay+0x28>
  {
  }
}
 80009a0:	bf00      	nop
 80009a2:	bf00      	nop
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	20000400 	.word	0x20000400

080009b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <__NVIC_SetPriorityGrouping+0x44>)
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c6:	68ba      	ldr	r2, [r7, #8]
 80009c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009cc:	4013      	ands	r3, r2
 80009ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009e2:	4a04      	ldr	r2, [pc, #16]	; (80009f4 <__NVIC_SetPriorityGrouping+0x44>)
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	60d3      	str	r3, [r2, #12]
}
 80009e8:	bf00      	nop
 80009ea:	3714      	adds	r7, #20
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009fc:	4b04      	ldr	r3, [pc, #16]	; (8000a10 <__NVIC_GetPriorityGrouping+0x18>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	0a1b      	lsrs	r3, r3, #8
 8000a02:	f003 0307 	and.w	r3, r3, #7
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	6039      	str	r1, [r7, #0]
 8000a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	db0a      	blt.n	8000a3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	b2da      	uxtb	r2, r3
 8000a2c:	490c      	ldr	r1, [pc, #48]	; (8000a60 <__NVIC_SetPriority+0x4c>)
 8000a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a32:	0112      	lsls	r2, r2, #4
 8000a34:	b2d2      	uxtb	r2, r2
 8000a36:	440b      	add	r3, r1
 8000a38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a3c:	e00a      	b.n	8000a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	b2da      	uxtb	r2, r3
 8000a42:	4908      	ldr	r1, [pc, #32]	; (8000a64 <__NVIC_SetPriority+0x50>)
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	f003 030f 	and.w	r3, r3, #15
 8000a4a:	3b04      	subs	r3, #4
 8000a4c:	0112      	lsls	r2, r2, #4
 8000a4e:	b2d2      	uxtb	r2, r2
 8000a50:	440b      	add	r3, r1
 8000a52:	761a      	strb	r2, [r3, #24]
}
 8000a54:	bf00      	nop
 8000a56:	370c      	adds	r7, #12
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	e000e100 	.word	0xe000e100
 8000a64:	e000ed00 	.word	0xe000ed00

08000a68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b089      	sub	sp, #36	; 0x24
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	f003 0307 	and.w	r3, r3, #7
 8000a7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a7c:	69fb      	ldr	r3, [r7, #28]
 8000a7e:	f1c3 0307 	rsb	r3, r3, #7
 8000a82:	2b04      	cmp	r3, #4
 8000a84:	bf28      	it	cs
 8000a86:	2304      	movcs	r3, #4
 8000a88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a8a:	69fb      	ldr	r3, [r7, #28]
 8000a8c:	3304      	adds	r3, #4
 8000a8e:	2b06      	cmp	r3, #6
 8000a90:	d902      	bls.n	8000a98 <NVIC_EncodePriority+0x30>
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	3b03      	subs	r3, #3
 8000a96:	e000      	b.n	8000a9a <NVIC_EncodePriority+0x32>
 8000a98:	2300      	movs	r3, #0
 8000a9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa0:	69bb      	ldr	r3, [r7, #24]
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	43da      	mvns	r2, r3
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	401a      	ands	r2, r3
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8000aba:	43d9      	mvns	r1, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac0:	4313      	orrs	r3, r2
         );
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3724      	adds	r7, #36	; 0x24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
	...

08000ad0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	3b01      	subs	r3, #1
 8000adc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ae0:	d301      	bcc.n	8000ae6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	e00f      	b.n	8000b06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <SysTick_Config+0x40>)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000aee:	210f      	movs	r1, #15
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	f7ff ff8e 	bl	8000a14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af8:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <SysTick_Config+0x40>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000afe:	4b04      	ldr	r3, [pc, #16]	; (8000b10 <SysTick_Config+0x40>)
 8000b00:	2207      	movs	r2, #7
 8000b02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3708      	adds	r7, #8
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	e000e010 	.word	0xe000e010

08000b14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff ff47 	bl	80009b0 <__NVIC_SetPriorityGrouping>
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}

08000b2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b2a:	b580      	push	{r7, lr}
 8000b2c:	b086      	sub	sp, #24
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	4603      	mov	r3, r0
 8000b32:	60b9      	str	r1, [r7, #8]
 8000b34:	607a      	str	r2, [r7, #4]
 8000b36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b3c:	f7ff ff5c 	bl	80009f8 <__NVIC_GetPriorityGrouping>
 8000b40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	68b9      	ldr	r1, [r7, #8]
 8000b46:	6978      	ldr	r0, [r7, #20]
 8000b48:	f7ff ff8e 	bl	8000a68 <NVIC_EncodePriority>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b52:	4611      	mov	r1, r2
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff ff5d 	bl	8000a14 <__NVIC_SetPriority>
}
 8000b5a:	bf00      	nop
 8000b5c:	3718      	adds	r7, #24
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	b082      	sub	sp, #8
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b6a:	6878      	ldr	r0, [r7, #4]
 8000b6c:	f7ff ffb0 	bl	8000ad0 <SysTick_Config>
 8000b70:	4603      	mov	r3, r0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b087      	sub	sp, #28
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b86:	2300      	movs	r3, #0
 8000b88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b8a:	e14e      	b.n	8000e2a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	2101      	movs	r1, #1
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	fa01 f303 	lsl.w	r3, r1, r3
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	f000 8140 	beq.w	8000e24 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f003 0303 	and.w	r3, r3, #3
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d005      	beq.n	8000bbc <HAL_GPIO_Init+0x40>
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	685b      	ldr	r3, [r3, #4]
 8000bb4:	f003 0303 	and.w	r3, r3, #3
 8000bb8:	2b02      	cmp	r3, #2
 8000bba:	d130      	bne.n	8000c1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	689b      	ldr	r3, [r3, #8]
 8000bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	2203      	movs	r2, #3
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	68da      	ldr	r2, [r3, #12]
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	693a      	ldr	r2, [r7, #16]
 8000be2:	4313      	orrs	r3, r2
 8000be4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfa:	43db      	mvns	r3, r3
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	091b      	lsrs	r3, r3, #4
 8000c08:	f003 0201 	and.w	r2, r3, #1
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	693a      	ldr	r2, [r7, #16]
 8000c14:	4313      	orrs	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	f003 0303 	and.w	r3, r3, #3
 8000c26:	2b03      	cmp	r3, #3
 8000c28:	d017      	beq.n	8000c5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	68db      	ldr	r3, [r3, #12]
 8000c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	2203      	movs	r2, #3
 8000c36:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3a:	43db      	mvns	r3, r3
 8000c3c:	693a      	ldr	r2, [r7, #16]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	689a      	ldr	r2, [r3, #8]
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	693a      	ldr	r2, [r7, #16]
 8000c58:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f003 0303 	and.w	r3, r3, #3
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d123      	bne.n	8000cae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c66:	697b      	ldr	r3, [r7, #20]
 8000c68:	08da      	lsrs	r2, r3, #3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	3208      	adds	r2, #8
 8000c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	220f      	movs	r2, #15
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43db      	mvns	r3, r3
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	4013      	ands	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	691a      	ldr	r2, [r3, #16]
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	f003 0307 	and.w	r3, r3, #7
 8000c94:	009b      	lsls	r3, r3, #2
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	08da      	lsrs	r2, r3, #3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3208      	adds	r2, #8
 8000ca8:	6939      	ldr	r1, [r7, #16]
 8000caa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	2203      	movs	r2, #3
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f003 0203 	and.w	r2, r3, #3
 8000cce:	697b      	ldr	r3, [r7, #20]
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	693a      	ldr	r2, [r7, #16]
 8000cd8:	4313      	orrs	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f000 809a 	beq.w	8000e24 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cf0:	4b55      	ldr	r3, [pc, #340]	; (8000e48 <HAL_GPIO_Init+0x2cc>)
 8000cf2:	699b      	ldr	r3, [r3, #24]
 8000cf4:	4a54      	ldr	r2, [pc, #336]	; (8000e48 <HAL_GPIO_Init+0x2cc>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	6193      	str	r3, [r2, #24]
 8000cfc:	4b52      	ldr	r3, [pc, #328]	; (8000e48 <HAL_GPIO_Init+0x2cc>)
 8000cfe:	699b      	ldr	r3, [r3, #24]
 8000d00:	f003 0301 	and.w	r3, r3, #1
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d08:	4a50      	ldr	r2, [pc, #320]	; (8000e4c <HAL_GPIO_Init+0x2d0>)
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	089b      	lsrs	r3, r3, #2
 8000d0e:	3302      	adds	r3, #2
 8000d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	f003 0303 	and.w	r3, r3, #3
 8000d1c:	009b      	lsls	r3, r3, #2
 8000d1e:	220f      	movs	r2, #15
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	43db      	mvns	r3, r3
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	4013      	ands	r3, r2
 8000d2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d32:	d013      	beq.n	8000d5c <HAL_GPIO_Init+0x1e0>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4a46      	ldr	r2, [pc, #280]	; (8000e50 <HAL_GPIO_Init+0x2d4>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d00d      	beq.n	8000d58 <HAL_GPIO_Init+0x1dc>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	4a45      	ldr	r2, [pc, #276]	; (8000e54 <HAL_GPIO_Init+0x2d8>)
 8000d40:	4293      	cmp	r3, r2
 8000d42:	d007      	beq.n	8000d54 <HAL_GPIO_Init+0x1d8>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	4a44      	ldr	r2, [pc, #272]	; (8000e58 <HAL_GPIO_Init+0x2dc>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d101      	bne.n	8000d50 <HAL_GPIO_Init+0x1d4>
 8000d4c:	2303      	movs	r3, #3
 8000d4e:	e006      	b.n	8000d5e <HAL_GPIO_Init+0x1e2>
 8000d50:	2305      	movs	r3, #5
 8000d52:	e004      	b.n	8000d5e <HAL_GPIO_Init+0x1e2>
 8000d54:	2302      	movs	r3, #2
 8000d56:	e002      	b.n	8000d5e <HAL_GPIO_Init+0x1e2>
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e000      	b.n	8000d5e <HAL_GPIO_Init+0x1e2>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	697a      	ldr	r2, [r7, #20]
 8000d60:	f002 0203 	and.w	r2, r2, #3
 8000d64:	0092      	lsls	r2, r2, #2
 8000d66:	4093      	lsls	r3, r2
 8000d68:	693a      	ldr	r2, [r7, #16]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d6e:	4937      	ldr	r1, [pc, #220]	; (8000e4c <HAL_GPIO_Init+0x2d0>)
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	089b      	lsrs	r3, r3, #2
 8000d74:	3302      	adds	r3, #2
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d7c:	4b37      	ldr	r3, [pc, #220]	; (8000e5c <HAL_GPIO_Init+0x2e0>)
 8000d7e:	689b      	ldr	r3, [r3, #8]
 8000d80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	43db      	mvns	r3, r3
 8000d86:	693a      	ldr	r2, [r7, #16]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d003      	beq.n	8000da0 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000da0:	4a2e      	ldr	r2, [pc, #184]	; (8000e5c <HAL_GPIO_Init+0x2e0>)
 8000da2:	693b      	ldr	r3, [r7, #16]
 8000da4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000da6:	4b2d      	ldr	r3, [pc, #180]	; (8000e5c <HAL_GPIO_Init+0x2e0>)
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	43db      	mvns	r3, r3
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	4013      	ands	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d003      	beq.n	8000dca <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8000dc2:	693a      	ldr	r2, [r7, #16]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000dca:	4a24      	ldr	r2, [pc, #144]	; (8000e5c <HAL_GPIO_Init+0x2e0>)
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dd0:	4b22      	ldr	r3, [pc, #136]	; (8000e5c <HAL_GPIO_Init+0x2e0>)
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d003      	beq.n	8000df4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	4313      	orrs	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000df4:	4a19      	ldr	r2, [pc, #100]	; (8000e5c <HAL_GPIO_Init+0x2e0>)
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dfa:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <HAL_GPIO_Init+0x2e0>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	43db      	mvns	r3, r3
 8000e04:	693a      	ldr	r2, [r7, #16]
 8000e06:	4013      	ands	r3, r2
 8000e08:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d003      	beq.n	8000e1e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8000e16:	693a      	ldr	r2, [r7, #16]
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e1e:	4a0f      	ldr	r2, [pc, #60]	; (8000e5c <HAL_GPIO_Init+0x2e0>)
 8000e20:	693b      	ldr	r3, [r7, #16]
 8000e22:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	3301      	adds	r3, #1
 8000e28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	fa22 f303 	lsr.w	r3, r2, r3
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	f47f aea9 	bne.w	8000b8c <HAL_GPIO_Init+0x10>
  }
}
 8000e3a:	bf00      	nop
 8000e3c:	bf00      	nop
 8000e3e:	371c      	adds	r7, #28
 8000e40:	46bd      	mov	sp, r7
 8000e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e46:	4770      	bx	lr
 8000e48:	40021000 	.word	0x40021000
 8000e4c:	40010000 	.word	0x40010000
 8000e50:	48000400 	.word	0x48000400
 8000e54:	48000800 	.word	0x48000800
 8000e58:	48000c00 	.word	0x48000c00
 8000e5c:	40010400 	.word	0x40010400

08000e60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
 8000e68:	460b      	mov	r3, r1
 8000e6a:	807b      	strh	r3, [r7, #2]
 8000e6c:	4613      	mov	r3, r2
 8000e6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e70:	787b      	ldrb	r3, [r7, #1]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e76:	887a      	ldrh	r2, [r7, #2]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e7c:	e002      	b.n	8000e84 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e7e:	887a      	ldrh	r2, [r7, #2]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e84:	bf00      	nop
 8000e86:	370c      	adds	r7, #12
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000e9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ea0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000ea6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d102      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	f001 b823 	b.w	8001efc <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000eba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f000 817d 	beq.w	80011c6 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ecc:	4bbc      	ldr	r3, [pc, #752]	; (80011c0 <HAL_RCC_OscConfig+0x330>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 030c 	and.w	r3, r3, #12
 8000ed4:	2b04      	cmp	r3, #4
 8000ed6:	d00c      	beq.n	8000ef2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ed8:	4bb9      	ldr	r3, [pc, #740]	; (80011c0 <HAL_RCC_OscConfig+0x330>)
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 030c 	and.w	r3, r3, #12
 8000ee0:	2b08      	cmp	r3, #8
 8000ee2:	d15c      	bne.n	8000f9e <HAL_RCC_OscConfig+0x10e>
 8000ee4:	4bb6      	ldr	r3, [pc, #728]	; (80011c0 <HAL_RCC_OscConfig+0x330>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ef0:	d155      	bne.n	8000f9e <HAL_RCC_OscConfig+0x10e>
 8000ef2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ef6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000efa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8000efe:	fa93 f3a3 	rbit	r3, r3
 8000f02:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f06:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f0a:	fab3 f383 	clz	r3, r3
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	095b      	lsrs	r3, r3, #5
 8000f12:	b2db      	uxtb	r3, r3
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d102      	bne.n	8000f24 <HAL_RCC_OscConfig+0x94>
 8000f1e:	4ba8      	ldr	r3, [pc, #672]	; (80011c0 <HAL_RCC_OscConfig+0x330>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	e015      	b.n	8000f50 <HAL_RCC_OscConfig+0xc0>
 8000f24:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f28:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f2c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8000f30:	fa93 f3a3 	rbit	r3, r3
 8000f34:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000f38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f3c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000f40:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8000f44:	fa93 f3a3 	rbit	r3, r3
 8000f48:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8000f4c:	4b9c      	ldr	r3, [pc, #624]	; (80011c0 <HAL_RCC_OscConfig+0x330>)
 8000f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f50:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f54:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8000f58:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000f5c:	fa92 f2a2 	rbit	r2, r2
 8000f60:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8000f64:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8000f68:	fab2 f282 	clz	r2, r2
 8000f6c:	b2d2      	uxtb	r2, r2
 8000f6e:	f042 0220 	orr.w	r2, r2, #32
 8000f72:	b2d2      	uxtb	r2, r2
 8000f74:	f002 021f 	and.w	r2, r2, #31
 8000f78:	2101      	movs	r1, #1
 8000f7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000f7e:	4013      	ands	r3, r2
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	f000 811f 	beq.w	80011c4 <HAL_RCC_OscConfig+0x334>
 8000f86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000f8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f040 8116 	bne.w	80011c4 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	f000 bfaf 	b.w	8001efc <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fa2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fae:	d106      	bne.n	8000fbe <HAL_RCC_OscConfig+0x12e>
 8000fb0:	4b83      	ldr	r3, [pc, #524]	; (80011c0 <HAL_RCC_OscConfig+0x330>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a82      	ldr	r2, [pc, #520]	; (80011c0 <HAL_RCC_OscConfig+0x330>)
 8000fb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fba:	6013      	str	r3, [r2, #0]
 8000fbc:	e036      	b.n	800102c <HAL_RCC_OscConfig+0x19c>
 8000fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d10c      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x158>
 8000fce:	4b7c      	ldr	r3, [pc, #496]	; (80011c0 <HAL_RCC_OscConfig+0x330>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a7b      	ldr	r2, [pc, #492]	; (80011c0 <HAL_RCC_OscConfig+0x330>)
 8000fd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fd8:	6013      	str	r3, [r2, #0]
 8000fda:	4b79      	ldr	r3, [pc, #484]	; (80011c0 <HAL_RCC_OscConfig+0x330>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	4a78      	ldr	r2, [pc, #480]	; (80011c0 <HAL_RCC_OscConfig+0x330>)
 8000fe0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fe4:	6013      	str	r3, [r2, #0]
 8000fe6:	e021      	b.n	800102c <HAL_RCC_OscConfig+0x19c>
 8000fe8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8000fec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ff8:	d10c      	bne.n	8001014 <HAL_RCC_OscConfig+0x184>
 8000ffa:	4b71      	ldr	r3, [pc, #452]	; (80011c0 <HAL_RCC_OscConfig+0x330>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a70      	ldr	r2, [pc, #448]	; (80011c0 <HAL_RCC_OscConfig+0x330>)
 8001000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	4b6e      	ldr	r3, [pc, #440]	; (80011c0 <HAL_RCC_OscConfig+0x330>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a6d      	ldr	r2, [pc, #436]	; (80011c0 <HAL_RCC_OscConfig+0x330>)
 800100c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	e00b      	b.n	800102c <HAL_RCC_OscConfig+0x19c>
 8001014:	4b6a      	ldr	r3, [pc, #424]	; (80011c0 <HAL_RCC_OscConfig+0x330>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a69      	ldr	r2, [pc, #420]	; (80011c0 <HAL_RCC_OscConfig+0x330>)
 800101a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800101e:	6013      	str	r3, [r2, #0]
 8001020:	4b67      	ldr	r3, [pc, #412]	; (80011c0 <HAL_RCC_OscConfig+0x330>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a66      	ldr	r2, [pc, #408]	; (80011c0 <HAL_RCC_OscConfig+0x330>)
 8001026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800102a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800102c:	4b64      	ldr	r3, [pc, #400]	; (80011c0 <HAL_RCC_OscConfig+0x330>)
 800102e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001030:	f023 020f 	bic.w	r2, r3, #15
 8001034:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001038:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	495f      	ldr	r1, [pc, #380]	; (80011c0 <HAL_RCC_OscConfig+0x330>)
 8001042:	4313      	orrs	r3, r2
 8001044:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001046:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800104a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d059      	beq.n	800110a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001056:	f7ff fc7b 	bl	8000950 <HAL_GetTick>
 800105a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800105e:	e00a      	b.n	8001076 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001060:	f7ff fc76 	bl	8000950 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	2b64      	cmp	r3, #100	; 0x64
 800106e:	d902      	bls.n	8001076 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001070:	2303      	movs	r3, #3
 8001072:	f000 bf43 	b.w	8001efc <HAL_RCC_OscConfig+0x106c>
 8001076:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800107a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800107e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001082:	fa93 f3a3 	rbit	r3, r3
 8001086:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 800108a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800108e:	fab3 f383 	clz	r3, r3
 8001092:	b2db      	uxtb	r3, r3
 8001094:	095b      	lsrs	r3, r3, #5
 8001096:	b2db      	uxtb	r3, r3
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	b2db      	uxtb	r3, r3
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d102      	bne.n	80010a8 <HAL_RCC_OscConfig+0x218>
 80010a2:	4b47      	ldr	r3, [pc, #284]	; (80011c0 <HAL_RCC_OscConfig+0x330>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	e015      	b.n	80010d4 <HAL_RCC_OscConfig+0x244>
 80010a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010ac:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80010b4:	fa93 f3a3 	rbit	r3, r3
 80010b8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80010bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010c0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80010c4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80010c8:	fa93 f3a3 	rbit	r3, r3
 80010cc:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80010d0:	4b3b      	ldr	r3, [pc, #236]	; (80011c0 <HAL_RCC_OscConfig+0x330>)
 80010d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010d8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80010dc:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80010e0:	fa92 f2a2 	rbit	r2, r2
 80010e4:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80010e8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80010ec:	fab2 f282 	clz	r2, r2
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	f042 0220 	orr.w	r2, r2, #32
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	f002 021f 	and.w	r2, r2, #31
 80010fc:	2101      	movs	r1, #1
 80010fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001102:	4013      	ands	r3, r2
 8001104:	2b00      	cmp	r3, #0
 8001106:	d0ab      	beq.n	8001060 <HAL_RCC_OscConfig+0x1d0>
 8001108:	e05d      	b.n	80011c6 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110a:	f7ff fc21 	bl	8000950 <HAL_GetTick>
 800110e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001112:	e00a      	b.n	800112a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001114:	f7ff fc1c 	bl	8000950 <HAL_GetTick>
 8001118:	4602      	mov	r2, r0
 800111a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800111e:	1ad3      	subs	r3, r2, r3
 8001120:	2b64      	cmp	r3, #100	; 0x64
 8001122:	d902      	bls.n	800112a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001124:	2303      	movs	r3, #3
 8001126:	f000 bee9 	b.w	8001efc <HAL_RCC_OscConfig+0x106c>
 800112a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800112e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001132:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001136:	fa93 f3a3 	rbit	r3, r3
 800113a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800113e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001142:	fab3 f383 	clz	r3, r3
 8001146:	b2db      	uxtb	r3, r3
 8001148:	095b      	lsrs	r3, r3, #5
 800114a:	b2db      	uxtb	r3, r3
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2b01      	cmp	r3, #1
 8001154:	d102      	bne.n	800115c <HAL_RCC_OscConfig+0x2cc>
 8001156:	4b1a      	ldr	r3, [pc, #104]	; (80011c0 <HAL_RCC_OscConfig+0x330>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	e015      	b.n	8001188 <HAL_RCC_OscConfig+0x2f8>
 800115c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001160:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001164:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001168:	fa93 f3a3 	rbit	r3, r3
 800116c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001170:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001174:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001178:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 800117c:	fa93 f3a3 	rbit	r3, r3
 8001180:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001184:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <HAL_RCC_OscConfig+0x330>)
 8001186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001188:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800118c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001190:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001194:	fa92 f2a2 	rbit	r2, r2
 8001198:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800119c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80011a0:	fab2 f282 	clz	r2, r2
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	f042 0220 	orr.w	r2, r2, #32
 80011aa:	b2d2      	uxtb	r2, r2
 80011ac:	f002 021f 	and.w	r2, r2, #31
 80011b0:	2101      	movs	r1, #1
 80011b2:	fa01 f202 	lsl.w	r2, r1, r2
 80011b6:	4013      	ands	r3, r2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d1ab      	bne.n	8001114 <HAL_RCC_OscConfig+0x284>
 80011bc:	e003      	b.n	80011c6 <HAL_RCC_OscConfig+0x336>
 80011be:	bf00      	nop
 80011c0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80011ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0302 	and.w	r3, r3, #2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f000 817d 	beq.w	80014d6 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011dc:	4ba6      	ldr	r3, [pc, #664]	; (8001478 <HAL_RCC_OscConfig+0x5e8>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f003 030c 	and.w	r3, r3, #12
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d00b      	beq.n	8001200 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011e8:	4ba3      	ldr	r3, [pc, #652]	; (8001478 <HAL_RCC_OscConfig+0x5e8>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 030c 	and.w	r3, r3, #12
 80011f0:	2b08      	cmp	r3, #8
 80011f2:	d172      	bne.n	80012da <HAL_RCC_OscConfig+0x44a>
 80011f4:	4ba0      	ldr	r3, [pc, #640]	; (8001478 <HAL_RCC_OscConfig+0x5e8>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d16c      	bne.n	80012da <HAL_RCC_OscConfig+0x44a>
 8001200:	2302      	movs	r3, #2
 8001202:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001206:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800120a:	fa93 f3a3 	rbit	r3, r3
 800120e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001212:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001216:	fab3 f383 	clz	r3, r3
 800121a:	b2db      	uxtb	r3, r3
 800121c:	095b      	lsrs	r3, r3, #5
 800121e:	b2db      	uxtb	r3, r3
 8001220:	f043 0301 	orr.w	r3, r3, #1
 8001224:	b2db      	uxtb	r3, r3
 8001226:	2b01      	cmp	r3, #1
 8001228:	d102      	bne.n	8001230 <HAL_RCC_OscConfig+0x3a0>
 800122a:	4b93      	ldr	r3, [pc, #588]	; (8001478 <HAL_RCC_OscConfig+0x5e8>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	e013      	b.n	8001258 <HAL_RCC_OscConfig+0x3c8>
 8001230:	2302      	movs	r3, #2
 8001232:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001236:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800123a:	fa93 f3a3 	rbit	r3, r3
 800123e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001242:	2302      	movs	r3, #2
 8001244:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001248:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800124c:	fa93 f3a3 	rbit	r3, r3
 8001250:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001254:	4b88      	ldr	r3, [pc, #544]	; (8001478 <HAL_RCC_OscConfig+0x5e8>)
 8001256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001258:	2202      	movs	r2, #2
 800125a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800125e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001262:	fa92 f2a2 	rbit	r2, r2
 8001266:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800126a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800126e:	fab2 f282 	clz	r2, r2
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	f042 0220 	orr.w	r2, r2, #32
 8001278:	b2d2      	uxtb	r2, r2
 800127a:	f002 021f 	and.w	r2, r2, #31
 800127e:	2101      	movs	r1, #1
 8001280:	fa01 f202 	lsl.w	r2, r1, r2
 8001284:	4013      	ands	r3, r2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d00a      	beq.n	80012a0 <HAL_RCC_OscConfig+0x410>
 800128a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800128e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	691b      	ldr	r3, [r3, #16]
 8001296:	2b01      	cmp	r3, #1
 8001298:	d002      	beq.n	80012a0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	f000 be2e 	b.w	8001efc <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a0:	4b75      	ldr	r3, [pc, #468]	; (8001478 <HAL_RCC_OscConfig+0x5e8>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012ac:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	21f8      	movs	r1, #248	; 0xf8
 80012b6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ba:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80012be:	fa91 f1a1 	rbit	r1, r1
 80012c2:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80012c6:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80012ca:	fab1 f181 	clz	r1, r1
 80012ce:	b2c9      	uxtb	r1, r1
 80012d0:	408b      	lsls	r3, r1
 80012d2:	4969      	ldr	r1, [pc, #420]	; (8001478 <HAL_RCC_OscConfig+0x5e8>)
 80012d4:	4313      	orrs	r3, r2
 80012d6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d8:	e0fd      	b.n	80014d6 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80012de:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	691b      	ldr	r3, [r3, #16]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f000 8088 	beq.w	80013fc <HAL_RCC_OscConfig+0x56c>
 80012ec:	2301      	movs	r3, #1
 80012ee:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80012f6:	fa93 f3a3 	rbit	r3, r3
 80012fa:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80012fe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001302:	fab3 f383 	clz	r3, r3
 8001306:	b2db      	uxtb	r3, r3
 8001308:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800130c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	461a      	mov	r2, r3
 8001314:	2301      	movs	r3, #1
 8001316:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7ff fb1a 	bl	8000950 <HAL_GetTick>
 800131c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001320:	e00a      	b.n	8001338 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001322:	f7ff fb15 	bl	8000950 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d902      	bls.n	8001338 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	f000 bde2 	b.w	8001efc <HAL_RCC_OscConfig+0x106c>
 8001338:	2302      	movs	r3, #2
 800133a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001342:	fa93 f3a3 	rbit	r3, r3
 8001346:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800134a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800134e:	fab3 f383 	clz	r3, r3
 8001352:	b2db      	uxtb	r3, r3
 8001354:	095b      	lsrs	r3, r3, #5
 8001356:	b2db      	uxtb	r3, r3
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	b2db      	uxtb	r3, r3
 800135e:	2b01      	cmp	r3, #1
 8001360:	d102      	bne.n	8001368 <HAL_RCC_OscConfig+0x4d8>
 8001362:	4b45      	ldr	r3, [pc, #276]	; (8001478 <HAL_RCC_OscConfig+0x5e8>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	e013      	b.n	8001390 <HAL_RCC_OscConfig+0x500>
 8001368:	2302      	movs	r3, #2
 800136a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800136e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001372:	fa93 f3a3 	rbit	r3, r3
 8001376:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800137a:	2302      	movs	r3, #2
 800137c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001380:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001384:	fa93 f3a3 	rbit	r3, r3
 8001388:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800138c:	4b3a      	ldr	r3, [pc, #232]	; (8001478 <HAL_RCC_OscConfig+0x5e8>)
 800138e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001390:	2202      	movs	r2, #2
 8001392:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001396:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800139a:	fa92 f2a2 	rbit	r2, r2
 800139e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80013a2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80013a6:	fab2 f282 	clz	r2, r2
 80013aa:	b2d2      	uxtb	r2, r2
 80013ac:	f042 0220 	orr.w	r2, r2, #32
 80013b0:	b2d2      	uxtb	r2, r2
 80013b2:	f002 021f 	and.w	r2, r2, #31
 80013b6:	2101      	movs	r1, #1
 80013b8:	fa01 f202 	lsl.w	r2, r1, r2
 80013bc:	4013      	ands	r3, r2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0af      	beq.n	8001322 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013c2:	4b2d      	ldr	r3, [pc, #180]	; (8001478 <HAL_RCC_OscConfig+0x5e8>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80013ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	21f8      	movs	r1, #248	; 0xf8
 80013d8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013dc:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80013e0:	fa91 f1a1 	rbit	r1, r1
 80013e4:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80013e8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80013ec:	fab1 f181 	clz	r1, r1
 80013f0:	b2c9      	uxtb	r1, r1
 80013f2:	408b      	lsls	r3, r1
 80013f4:	4920      	ldr	r1, [pc, #128]	; (8001478 <HAL_RCC_OscConfig+0x5e8>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	600b      	str	r3, [r1, #0]
 80013fa:	e06c      	b.n	80014d6 <HAL_RCC_OscConfig+0x646>
 80013fc:	2301      	movs	r3, #1
 80013fe:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001402:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001406:	fa93 f3a3 	rbit	r3, r3
 800140a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800140e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001412:	fab3 f383 	clz	r3, r3
 8001416:	b2db      	uxtb	r3, r3
 8001418:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800141c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	461a      	mov	r2, r3
 8001424:	2300      	movs	r3, #0
 8001426:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001428:	f7ff fa92 	bl	8000950 <HAL_GetTick>
 800142c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001430:	e00a      	b.n	8001448 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001432:	f7ff fa8d 	bl	8000950 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d902      	bls.n	8001448 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	f000 bd5a 	b.w	8001efc <HAL_RCC_OscConfig+0x106c>
 8001448:	2302      	movs	r3, #2
 800144a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800144e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8001452:	fa93 f3a3 	rbit	r3, r3
 8001456:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800145a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800145e:	fab3 f383 	clz	r3, r3
 8001462:	b2db      	uxtb	r3, r3
 8001464:	095b      	lsrs	r3, r3, #5
 8001466:	b2db      	uxtb	r3, r3
 8001468:	f043 0301 	orr.w	r3, r3, #1
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b01      	cmp	r3, #1
 8001470:	d104      	bne.n	800147c <HAL_RCC_OscConfig+0x5ec>
 8001472:	4b01      	ldr	r3, [pc, #4]	; (8001478 <HAL_RCC_OscConfig+0x5e8>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	e015      	b.n	80014a4 <HAL_RCC_OscConfig+0x614>
 8001478:	40021000 	.word	0x40021000
 800147c:	2302      	movs	r3, #2
 800147e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001482:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001486:	fa93 f3a3 	rbit	r3, r3
 800148a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800148e:	2302      	movs	r3, #2
 8001490:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001494:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001498:	fa93 f3a3 	rbit	r3, r3
 800149c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80014a0:	4bc8      	ldr	r3, [pc, #800]	; (80017c4 <HAL_RCC_OscConfig+0x934>)
 80014a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a4:	2202      	movs	r2, #2
 80014a6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80014aa:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80014ae:	fa92 f2a2 	rbit	r2, r2
 80014b2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80014b6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80014ba:	fab2 f282 	clz	r2, r2
 80014be:	b2d2      	uxtb	r2, r2
 80014c0:	f042 0220 	orr.w	r2, r2, #32
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	f002 021f 	and.w	r2, r2, #31
 80014ca:	2101      	movs	r1, #1
 80014cc:	fa01 f202 	lsl.w	r2, r1, r2
 80014d0:	4013      	ands	r3, r2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1ad      	bne.n	8001432 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0308 	and.w	r3, r3, #8
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f000 8110 	beq.w	800170c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80014f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d079      	beq.n	80015f0 <HAL_RCC_OscConfig+0x760>
 80014fc:	2301      	movs	r3, #1
 80014fe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001502:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001506:	fa93 f3a3 	rbit	r3, r3
 800150a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800150e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001512:	fab3 f383 	clz	r3, r3
 8001516:	b2db      	uxtb	r3, r3
 8001518:	461a      	mov	r2, r3
 800151a:	4bab      	ldr	r3, [pc, #684]	; (80017c8 <HAL_RCC_OscConfig+0x938>)
 800151c:	4413      	add	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	461a      	mov	r2, r3
 8001522:	2301      	movs	r3, #1
 8001524:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001526:	f7ff fa13 	bl	8000950 <HAL_GetTick>
 800152a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800152e:	e00a      	b.n	8001546 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001530:	f7ff fa0e 	bl	8000950 <HAL_GetTick>
 8001534:	4602      	mov	r2, r0
 8001536:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b02      	cmp	r3, #2
 800153e:	d902      	bls.n	8001546 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001540:	2303      	movs	r3, #3
 8001542:	f000 bcdb 	b.w	8001efc <HAL_RCC_OscConfig+0x106c>
 8001546:	2302      	movs	r3, #2
 8001548:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001550:	fa93 f3a3 	rbit	r3, r3
 8001554:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001558:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800155c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001560:	2202      	movs	r2, #2
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001568:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	fa93 f2a3 	rbit	r2, r3
 8001572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001576:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001580:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001584:	2202      	movs	r2, #2
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800158c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	fa93 f2a3 	rbit	r2, r3
 8001596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800159a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800159e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015a0:	4b88      	ldr	r3, [pc, #544]	; (80017c4 <HAL_RCC_OscConfig+0x934>)
 80015a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015a8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80015ac:	2102      	movs	r1, #2
 80015ae:	6019      	str	r1, [r3, #0]
 80015b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015b4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	fa93 f1a3 	rbit	r1, r3
 80015be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015c2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015c6:	6019      	str	r1, [r3, #0]
  return result;
 80015c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015cc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	fab3 f383 	clz	r3, r3
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	f003 031f 	and.w	r3, r3, #31
 80015e2:	2101      	movs	r1, #1
 80015e4:	fa01 f303 	lsl.w	r3, r1, r3
 80015e8:	4013      	ands	r3, r2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0a0      	beq.n	8001530 <HAL_RCC_OscConfig+0x6a0>
 80015ee:	e08d      	b.n	800170c <HAL_RCC_OscConfig+0x87c>
 80015f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80015f4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80015f8:	2201      	movs	r2, #1
 80015fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001600:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	fa93 f2a3 	rbit	r2, r3
 800160a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800160e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001612:	601a      	str	r2, [r3, #0]
  return result;
 8001614:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001618:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800161c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800161e:	fab3 f383 	clz	r3, r3
 8001622:	b2db      	uxtb	r3, r3
 8001624:	461a      	mov	r2, r3
 8001626:	4b68      	ldr	r3, [pc, #416]	; (80017c8 <HAL_RCC_OscConfig+0x938>)
 8001628:	4413      	add	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	461a      	mov	r2, r3
 800162e:	2300      	movs	r3, #0
 8001630:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001632:	f7ff f98d 	bl	8000950 <HAL_GetTick>
 8001636:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800163a:	e00a      	b.n	8001652 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800163c:	f7ff f988 	bl	8000950 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d902      	bls.n	8001652 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	f000 bc55 	b.w	8001efc <HAL_RCC_OscConfig+0x106c>
 8001652:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001656:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800165a:	2202      	movs	r2, #2
 800165c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001662:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	fa93 f2a3 	rbit	r2, r3
 800166c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001670:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800167a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800167e:	2202      	movs	r2, #2
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001686:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	fa93 f2a3 	rbit	r2, r3
 8001690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001694:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800169e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80016a2:	2202      	movs	r2, #2
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	fa93 f2a3 	rbit	r2, r3
 80016b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016b8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80016bc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016be:	4b41      	ldr	r3, [pc, #260]	; (80017c4 <HAL_RCC_OscConfig+0x934>)
 80016c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016c6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80016ca:	2102      	movs	r1, #2
 80016cc:	6019      	str	r1, [r3, #0]
 80016ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016d2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	fa93 f1a3 	rbit	r1, r3
 80016dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016e0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80016e4:	6019      	str	r1, [r3, #0]
  return result;
 80016e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80016ea:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	fab3 f383 	clz	r3, r3
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80016fa:	b2db      	uxtb	r3, r3
 80016fc:	f003 031f 	and.w	r3, r3, #31
 8001700:	2101      	movs	r1, #1
 8001702:	fa01 f303 	lsl.w	r3, r1, r3
 8001706:	4013      	ands	r3, r2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d197      	bne.n	800163c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800170c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001710:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	2b00      	cmp	r3, #0
 800171e:	f000 81a1 	beq.w	8001a64 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001722:	2300      	movs	r3, #0
 8001724:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001728:	4b26      	ldr	r3, [pc, #152]	; (80017c4 <HAL_RCC_OscConfig+0x934>)
 800172a:	69db      	ldr	r3, [r3, #28]
 800172c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d116      	bne.n	8001762 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001734:	4b23      	ldr	r3, [pc, #140]	; (80017c4 <HAL_RCC_OscConfig+0x934>)
 8001736:	69db      	ldr	r3, [r3, #28]
 8001738:	4a22      	ldr	r2, [pc, #136]	; (80017c4 <HAL_RCC_OscConfig+0x934>)
 800173a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800173e:	61d3      	str	r3, [r2, #28]
 8001740:	4b20      	ldr	r3, [pc, #128]	; (80017c4 <HAL_RCC_OscConfig+0x934>)
 8001742:	69db      	ldr	r3, [r3, #28]
 8001744:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001748:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800174c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001756:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800175a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800175c:	2301      	movs	r3, #1
 800175e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001762:	4b1a      	ldr	r3, [pc, #104]	; (80017cc <HAL_RCC_OscConfig+0x93c>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176a:	2b00      	cmp	r3, #0
 800176c:	d11a      	bne.n	80017a4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800176e:	4b17      	ldr	r3, [pc, #92]	; (80017cc <HAL_RCC_OscConfig+0x93c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a16      	ldr	r2, [pc, #88]	; (80017cc <HAL_RCC_OscConfig+0x93c>)
 8001774:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001778:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800177a:	f7ff f8e9 	bl	8000950 <HAL_GetTick>
 800177e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001782:	e009      	b.n	8001798 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001784:	f7ff f8e4 	bl	8000950 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b64      	cmp	r3, #100	; 0x64
 8001792:	d901      	bls.n	8001798 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e3b1      	b.n	8001efc <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <HAL_RCC_OscConfig+0x93c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d0ef      	beq.n	8001784 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d10d      	bne.n	80017d0 <HAL_RCC_OscConfig+0x940>
 80017b4:	4b03      	ldr	r3, [pc, #12]	; (80017c4 <HAL_RCC_OscConfig+0x934>)
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	4a02      	ldr	r2, [pc, #8]	; (80017c4 <HAL_RCC_OscConfig+0x934>)
 80017ba:	f043 0301 	orr.w	r3, r3, #1
 80017be:	6213      	str	r3, [r2, #32]
 80017c0:	e03c      	b.n	800183c <HAL_RCC_OscConfig+0x9ac>
 80017c2:	bf00      	nop
 80017c4:	40021000 	.word	0x40021000
 80017c8:	10908120 	.word	0x10908120
 80017cc:	40007000 	.word	0x40007000
 80017d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017d4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d10c      	bne.n	80017fa <HAL_RCC_OscConfig+0x96a>
 80017e0:	4bc1      	ldr	r3, [pc, #772]	; (8001ae8 <HAL_RCC_OscConfig+0xc58>)
 80017e2:	6a1b      	ldr	r3, [r3, #32]
 80017e4:	4ac0      	ldr	r2, [pc, #768]	; (8001ae8 <HAL_RCC_OscConfig+0xc58>)
 80017e6:	f023 0301 	bic.w	r3, r3, #1
 80017ea:	6213      	str	r3, [r2, #32]
 80017ec:	4bbe      	ldr	r3, [pc, #760]	; (8001ae8 <HAL_RCC_OscConfig+0xc58>)
 80017ee:	6a1b      	ldr	r3, [r3, #32]
 80017f0:	4abd      	ldr	r2, [pc, #756]	; (8001ae8 <HAL_RCC_OscConfig+0xc58>)
 80017f2:	f023 0304 	bic.w	r3, r3, #4
 80017f6:	6213      	str	r3, [r2, #32]
 80017f8:	e020      	b.n	800183c <HAL_RCC_OscConfig+0x9ac>
 80017fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80017fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	2b05      	cmp	r3, #5
 8001808:	d10c      	bne.n	8001824 <HAL_RCC_OscConfig+0x994>
 800180a:	4bb7      	ldr	r3, [pc, #732]	; (8001ae8 <HAL_RCC_OscConfig+0xc58>)
 800180c:	6a1b      	ldr	r3, [r3, #32]
 800180e:	4ab6      	ldr	r2, [pc, #728]	; (8001ae8 <HAL_RCC_OscConfig+0xc58>)
 8001810:	f043 0304 	orr.w	r3, r3, #4
 8001814:	6213      	str	r3, [r2, #32]
 8001816:	4bb4      	ldr	r3, [pc, #720]	; (8001ae8 <HAL_RCC_OscConfig+0xc58>)
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	4ab3      	ldr	r2, [pc, #716]	; (8001ae8 <HAL_RCC_OscConfig+0xc58>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	6213      	str	r3, [r2, #32]
 8001822:	e00b      	b.n	800183c <HAL_RCC_OscConfig+0x9ac>
 8001824:	4bb0      	ldr	r3, [pc, #704]	; (8001ae8 <HAL_RCC_OscConfig+0xc58>)
 8001826:	6a1b      	ldr	r3, [r3, #32]
 8001828:	4aaf      	ldr	r2, [pc, #700]	; (8001ae8 <HAL_RCC_OscConfig+0xc58>)
 800182a:	f023 0301 	bic.w	r3, r3, #1
 800182e:	6213      	str	r3, [r2, #32]
 8001830:	4bad      	ldr	r3, [pc, #692]	; (8001ae8 <HAL_RCC_OscConfig+0xc58>)
 8001832:	6a1b      	ldr	r3, [r3, #32]
 8001834:	4aac      	ldr	r2, [pc, #688]	; (8001ae8 <HAL_RCC_OscConfig+0xc58>)
 8001836:	f023 0304 	bic.w	r3, r3, #4
 800183a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800183c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001840:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 8081 	beq.w	8001950 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800184e:	f7ff f87f 	bl	8000950 <HAL_GetTick>
 8001852:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001856:	e00b      	b.n	8001870 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001858:	f7ff f87a 	bl	8000950 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	f241 3288 	movw	r2, #5000	; 0x1388
 8001868:	4293      	cmp	r3, r2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e345      	b.n	8001efc <HAL_RCC_OscConfig+0x106c>
 8001870:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001874:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001878:	2202      	movs	r2, #2
 800187a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001880:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	fa93 f2a3 	rbit	r2, r3
 800188a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800188e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001898:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800189c:	2202      	movs	r2, #2
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018a4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	fa93 f2a3 	rbit	r2, r3
 80018ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018b2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80018b6:	601a      	str	r2, [r3, #0]
  return result;
 80018b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018bc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80018c0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c2:	fab3 f383 	clz	r3, r3
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	095b      	lsrs	r3, r3, #5
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	f043 0302 	orr.w	r3, r3, #2
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d102      	bne.n	80018dc <HAL_RCC_OscConfig+0xa4c>
 80018d6:	4b84      	ldr	r3, [pc, #528]	; (8001ae8 <HAL_RCC_OscConfig+0xc58>)
 80018d8:	6a1b      	ldr	r3, [r3, #32]
 80018da:	e013      	b.n	8001904 <HAL_RCC_OscConfig+0xa74>
 80018dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018e0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80018e4:	2202      	movs	r2, #2
 80018e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018ec:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	fa93 f2a3 	rbit	r2, r3
 80018f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80018fa:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	4b79      	ldr	r3, [pc, #484]	; (8001ae8 <HAL_RCC_OscConfig+0xc58>)
 8001902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001904:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001908:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800190c:	2102      	movs	r1, #2
 800190e:	6011      	str	r1, [r2, #0]
 8001910:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001914:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8001918:	6812      	ldr	r2, [r2, #0]
 800191a:	fa92 f1a2 	rbit	r1, r2
 800191e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001922:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001926:	6011      	str	r1, [r2, #0]
  return result;
 8001928:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800192c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001930:	6812      	ldr	r2, [r2, #0]
 8001932:	fab2 f282 	clz	r2, r2
 8001936:	b2d2      	uxtb	r2, r2
 8001938:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800193c:	b2d2      	uxtb	r2, r2
 800193e:	f002 021f 	and.w	r2, r2, #31
 8001942:	2101      	movs	r1, #1
 8001944:	fa01 f202 	lsl.w	r2, r1, r2
 8001948:	4013      	ands	r3, r2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d084      	beq.n	8001858 <HAL_RCC_OscConfig+0x9c8>
 800194e:	e07f      	b.n	8001a50 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001950:	f7fe fffe 	bl	8000950 <HAL_GetTick>
 8001954:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001958:	e00b      	b.n	8001972 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800195a:	f7fe fff9 	bl	8000950 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	f241 3288 	movw	r2, #5000	; 0x1388
 800196a:	4293      	cmp	r3, r2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e2c4      	b.n	8001efc <HAL_RCC_OscConfig+0x106c>
 8001972:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001976:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800197a:	2202      	movs	r2, #2
 800197c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800197e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001982:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	fa93 f2a3 	rbit	r2, r3
 800198c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001990:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800199a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800199e:	2202      	movs	r2, #2
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019a6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	fa93 f2a3 	rbit	r2, r3
 80019b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019b4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80019b8:	601a      	str	r2, [r3, #0]
  return result;
 80019ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019be:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80019c2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c4:	fab3 f383 	clz	r3, r3
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	095b      	lsrs	r3, r3, #5
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	f043 0302 	orr.w	r3, r3, #2
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d102      	bne.n	80019de <HAL_RCC_OscConfig+0xb4e>
 80019d8:	4b43      	ldr	r3, [pc, #268]	; (8001ae8 <HAL_RCC_OscConfig+0xc58>)
 80019da:	6a1b      	ldr	r3, [r3, #32]
 80019dc:	e013      	b.n	8001a06 <HAL_RCC_OscConfig+0xb76>
 80019de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019e2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80019e6:	2202      	movs	r2, #2
 80019e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019ee:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	fa93 f2a3 	rbit	r2, r3
 80019f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80019fc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	4b39      	ldr	r3, [pc, #228]	; (8001ae8 <HAL_RCC_OscConfig+0xc58>)
 8001a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a0a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001a0e:	2102      	movs	r1, #2
 8001a10:	6011      	str	r1, [r2, #0]
 8001a12:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a16:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8001a1a:	6812      	ldr	r2, [r2, #0]
 8001a1c:	fa92 f1a2 	rbit	r1, r2
 8001a20:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a24:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a28:	6011      	str	r1, [r2, #0]
  return result;
 8001a2a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001a2e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001a32:	6812      	ldr	r2, [r2, #0]
 8001a34:	fab2 f282 	clz	r2, r2
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	f002 021f 	and.w	r2, r2, #31
 8001a44:	2101      	movs	r1, #1
 8001a46:	fa01 f202 	lsl.w	r2, r1, r2
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d184      	bne.n	800195a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a50:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d105      	bne.n	8001a64 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a58:	4b23      	ldr	r3, [pc, #140]	; (8001ae8 <HAL_RCC_OscConfig+0xc58>)
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	4a22      	ldr	r2, [pc, #136]	; (8001ae8 <HAL_RCC_OscConfig+0xc58>)
 8001a5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a62:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a68:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f000 8242 	beq.w	8001efa <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a76:	4b1c      	ldr	r3, [pc, #112]	; (8001ae8 <HAL_RCC_OscConfig+0xc58>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f003 030c 	and.w	r3, r3, #12
 8001a7e:	2b08      	cmp	r3, #8
 8001a80:	f000 8213 	beq.w	8001eaa <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	69db      	ldr	r3, [r3, #28]
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	f040 8162 	bne.w	8001d5a <HAL_RCC_OscConfig+0xeca>
 8001a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001a9e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001aa2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aa8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	fa93 f2a3 	rbit	r2, r3
 8001ab2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ab6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001aba:	601a      	str	r2, [r3, #0]
  return result;
 8001abc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ac0:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8001ac4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac6:	fab3 f383 	clz	r3, r3
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ad0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	2300      	movs	r3, #0
 8001ada:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001adc:	f7fe ff38 	bl	8000950 <HAL_GetTick>
 8001ae0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae4:	e00c      	b.n	8001b00 <HAL_RCC_OscConfig+0xc70>
 8001ae6:	bf00      	nop
 8001ae8:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aec:	f7fe ff30 	bl	8000950 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001af6:	1ad3      	subs	r3, r2, r3
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e1fd      	b.n	8001efc <HAL_RCC_OscConfig+0x106c>
 8001b00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b04:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b12:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	fa93 f2a3 	rbit	r2, r3
 8001b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b20:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b24:	601a      	str	r2, [r3, #0]
  return result;
 8001b26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b2a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001b2e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b30:	fab3 f383 	clz	r3, r3
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	095b      	lsrs	r3, r3, #5
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d102      	bne.n	8001b4a <HAL_RCC_OscConfig+0xcba>
 8001b44:	4bb0      	ldr	r3, [pc, #704]	; (8001e08 <HAL_RCC_OscConfig+0xf78>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	e027      	b.n	8001b9a <HAL_RCC_OscConfig+0xd0a>
 8001b4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b4e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b5c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	fa93 f2a3 	rbit	r2, r3
 8001b66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b6a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b74:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001b78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b82:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	fa93 f2a3 	rbit	r2, r3
 8001b8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b90:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	4b9c      	ldr	r3, [pc, #624]	; (8001e08 <HAL_RCC_OscConfig+0xf78>)
 8001b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001b9e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001ba2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001ba6:	6011      	str	r1, [r2, #0]
 8001ba8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bac:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8001bb0:	6812      	ldr	r2, [r2, #0]
 8001bb2:	fa92 f1a2 	rbit	r1, r2
 8001bb6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bba:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001bbe:	6011      	str	r1, [r2, #0]
  return result;
 8001bc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001bc4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001bc8:	6812      	ldr	r2, [r2, #0]
 8001bca:	fab2 f282 	clz	r2, r2
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	f042 0220 	orr.w	r2, r2, #32
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	f002 021f 	and.w	r2, r2, #31
 8001bda:	2101      	movs	r1, #1
 8001bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8001be0:	4013      	ands	r3, r2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d182      	bne.n	8001aec <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001be6:	4b88      	ldr	r3, [pc, #544]	; (8001e08 <HAL_RCC_OscConfig+0xf78>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bf2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bfe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6a1b      	ldr	r3, [r3, #32]
 8001c06:	430b      	orrs	r3, r1
 8001c08:	497f      	ldr	r1, [pc, #508]	; (8001e08 <HAL_RCC_OscConfig+0xf78>)
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	604b      	str	r3, [r1, #4]
 8001c0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c12:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001c16:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c20:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	fa93 f2a3 	rbit	r2, r3
 8001c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c2e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c32:	601a      	str	r2, [r3, #0]
  return result;
 8001c34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c38:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001c3c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c3e:	fab3 f383 	clz	r3, r3
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c48:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001c4c:	009b      	lsls	r3, r3, #2
 8001c4e:	461a      	mov	r2, r3
 8001c50:	2301      	movs	r3, #1
 8001c52:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c54:	f7fe fe7c 	bl	8000950 <HAL_GetTick>
 8001c58:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001c5c:	e009      	b.n	8001c72 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c5e:	f7fe fe77 	bl	8000950 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e144      	b.n	8001efc <HAL_RCC_OscConfig+0x106c>
 8001c72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c76:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c7a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c84:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	fa93 f2a3 	rbit	r2, r3
 8001c8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c92:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001c96:	601a      	str	r2, [r3, #0]
  return result;
 8001c98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c9c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001ca0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ca2:	fab3 f383 	clz	r3, r3
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	095b      	lsrs	r3, r3, #5
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d102      	bne.n	8001cbc <HAL_RCC_OscConfig+0xe2c>
 8001cb6:	4b54      	ldr	r3, [pc, #336]	; (8001e08 <HAL_RCC_OscConfig+0xf78>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	e027      	b.n	8001d0c <HAL_RCC_OscConfig+0xe7c>
 8001cbc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cc0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001cc4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cc8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cce:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	fa93 f2a3 	rbit	r2, r3
 8001cd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cdc:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ce6:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001cea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001cf4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	fa93 f2a3 	rbit	r2, r3
 8001cfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d02:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001d06:	601a      	str	r2, [r3, #0]
 8001d08:	4b3f      	ldr	r3, [pc, #252]	; (8001e08 <HAL_RCC_OscConfig+0xf78>)
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d10:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001d14:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d18:	6011      	str	r1, [r2, #0]
 8001d1a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d1e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8001d22:	6812      	ldr	r2, [r2, #0]
 8001d24:	fa92 f1a2 	rbit	r1, r2
 8001d28:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d2c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d30:	6011      	str	r1, [r2, #0]
  return result;
 8001d32:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001d36:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	fab2 f282 	clz	r2, r2
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	f042 0220 	orr.w	r2, r2, #32
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	f002 021f 	and.w	r2, r2, #31
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d52:	4013      	ands	r3, r2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d082      	beq.n	8001c5e <HAL_RCC_OscConfig+0xdce>
 8001d58:	e0cf      	b.n	8001efa <HAL_RCC_OscConfig+0x106a>
 8001d5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d5e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001d62:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001d66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d6c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	fa93 f2a3 	rbit	r2, r3
 8001d76:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d7a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001d7e:	601a      	str	r2, [r3, #0]
  return result;
 8001d80:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d84:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001d88:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d8a:	fab3 f383 	clz	r3, r3
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001d94:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da0:	f7fe fdd6 	bl	8000950 <HAL_GetTick>
 8001da4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001da8:	e009      	b.n	8001dbe <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001daa:	f7fe fdd1 	bl	8000950 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e09e      	b.n	8001efc <HAL_RCC_OscConfig+0x106c>
 8001dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dc2:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001dc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001dca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	fa93 f2a3 	rbit	r2, r3
 8001dda:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dde:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001de2:	601a      	str	r2, [r3, #0]
  return result;
 8001de4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001de8:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001dec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dee:	fab3 f383 	clz	r3, r3
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	095b      	lsrs	r3, r3, #5
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d104      	bne.n	8001e0c <HAL_RCC_OscConfig+0xf7c>
 8001e02:	4b01      	ldr	r3, [pc, #4]	; (8001e08 <HAL_RCC_OscConfig+0xf78>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	e029      	b.n	8001e5c <HAL_RCC_OscConfig+0xfcc>
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e10:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e1e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	fa93 f2a3 	rbit	r2, r3
 8001e28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e2c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e36:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001e3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e44:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	fa93 f2a3 	rbit	r2, r3
 8001e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e52:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	4b2b      	ldr	r3, [pc, #172]	; (8001f08 <HAL_RCC_OscConfig+0x1078>)
 8001e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e60:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001e64:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e68:	6011      	str	r1, [r2, #0]
 8001e6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e6e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8001e72:	6812      	ldr	r2, [r2, #0]
 8001e74:	fa92 f1a2 	rbit	r1, r2
 8001e78:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e7c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001e80:	6011      	str	r1, [r2, #0]
  return result;
 8001e82:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8001e86:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001e8a:	6812      	ldr	r2, [r2, #0]
 8001e8c:	fab2 f282 	clz	r2, r2
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	f042 0220 	orr.w	r2, r2, #32
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	f002 021f 	and.w	r2, r2, #31
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d180      	bne.n	8001daa <HAL_RCC_OscConfig+0xf1a>
 8001ea8:	e027      	b.n	8001efa <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	2b01      	cmp	r3, #1
 8001eb8:	d101      	bne.n	8001ebe <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e01e      	b.n	8001efc <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ebe:	4b12      	ldr	r3, [pc, #72]	; (8001f08 <HAL_RCC_OscConfig+0x1078>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ec6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001eca:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d10b      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001ede:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001ee2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001eea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d001      	beq.n	8001efa <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e000      	b.n	8001efc <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40021000 	.word	0x40021000

08001f0c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b09e      	sub	sp, #120	; 0x78
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001f16:	2300      	movs	r3, #0
 8001f18:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e162      	b.n	80021ea <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f24:	4b90      	ldr	r3, [pc, #576]	; (8002168 <HAL_RCC_ClockConfig+0x25c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d910      	bls.n	8001f54 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f32:	4b8d      	ldr	r3, [pc, #564]	; (8002168 <HAL_RCC_ClockConfig+0x25c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f023 0207 	bic.w	r2, r3, #7
 8001f3a:	498b      	ldr	r1, [pc, #556]	; (8002168 <HAL_RCC_ClockConfig+0x25c>)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f42:	4b89      	ldr	r3, [pc, #548]	; (8002168 <HAL_RCC_ClockConfig+0x25c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d001      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e14a      	b.n	80021ea <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d008      	beq.n	8001f72 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f60:	4b82      	ldr	r3, [pc, #520]	; (800216c <HAL_RCC_ClockConfig+0x260>)
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	497f      	ldr	r1, [pc, #508]	; (800216c <HAL_RCC_ClockConfig+0x260>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 80dc 	beq.w	8002138 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d13c      	bne.n	8002002 <HAL_RCC_ClockConfig+0xf6>
 8001f88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f8c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f90:	fa93 f3a3 	rbit	r3, r3
 8001f94:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001f96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f98:	fab3 f383 	clz	r3, r3
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	095b      	lsrs	r3, r3, #5
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d102      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xa6>
 8001fac:	4b6f      	ldr	r3, [pc, #444]	; (800216c <HAL_RCC_ClockConfig+0x260>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	e00f      	b.n	8001fd2 <HAL_RCC_ClockConfig+0xc6>
 8001fb2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fb6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fba:	fa93 f3a3 	rbit	r3, r3
 8001fbe:	667b      	str	r3, [r7, #100]	; 0x64
 8001fc0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fc4:	663b      	str	r3, [r7, #96]	; 0x60
 8001fc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fc8:	fa93 f3a3 	rbit	r3, r3
 8001fcc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001fce:	4b67      	ldr	r3, [pc, #412]	; (800216c <HAL_RCC_ClockConfig+0x260>)
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fd6:	65ba      	str	r2, [r7, #88]	; 0x58
 8001fd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001fda:	fa92 f2a2 	rbit	r2, r2
 8001fde:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001fe0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001fe2:	fab2 f282 	clz	r2, r2
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	f042 0220 	orr.w	r2, r2, #32
 8001fec:	b2d2      	uxtb	r2, r2
 8001fee:	f002 021f 	and.w	r2, r2, #31
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d17b      	bne.n	80020f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e0f3      	b.n	80021ea <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	2b02      	cmp	r3, #2
 8002008:	d13c      	bne.n	8002084 <HAL_RCC_ClockConfig+0x178>
 800200a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800200e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002010:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002012:	fa93 f3a3 	rbit	r3, r3
 8002016:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800201a:	fab3 f383 	clz	r3, r3
 800201e:	b2db      	uxtb	r3, r3
 8002020:	095b      	lsrs	r3, r3, #5
 8002022:	b2db      	uxtb	r3, r3
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	b2db      	uxtb	r3, r3
 800202a:	2b01      	cmp	r3, #1
 800202c:	d102      	bne.n	8002034 <HAL_RCC_ClockConfig+0x128>
 800202e:	4b4f      	ldr	r3, [pc, #316]	; (800216c <HAL_RCC_ClockConfig+0x260>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	e00f      	b.n	8002054 <HAL_RCC_ClockConfig+0x148>
 8002034:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002038:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800203c:	fa93 f3a3 	rbit	r3, r3
 8002040:	647b      	str	r3, [r7, #68]	; 0x44
 8002042:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002046:	643b      	str	r3, [r7, #64]	; 0x40
 8002048:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800204a:	fa93 f3a3 	rbit	r3, r3
 800204e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002050:	4b46      	ldr	r3, [pc, #280]	; (800216c <HAL_RCC_ClockConfig+0x260>)
 8002052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002054:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002058:	63ba      	str	r2, [r7, #56]	; 0x38
 800205a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800205c:	fa92 f2a2 	rbit	r2, r2
 8002060:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002062:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002064:	fab2 f282 	clz	r2, r2
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	f042 0220 	orr.w	r2, r2, #32
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	f002 021f 	and.w	r2, r2, #31
 8002074:	2101      	movs	r1, #1
 8002076:	fa01 f202 	lsl.w	r2, r1, r2
 800207a:	4013      	ands	r3, r2
 800207c:	2b00      	cmp	r3, #0
 800207e:	d13a      	bne.n	80020f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e0b2      	b.n	80021ea <HAL_RCC_ClockConfig+0x2de>
 8002084:	2302      	movs	r3, #2
 8002086:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800208a:	fa93 f3a3 	rbit	r3, r3
 800208e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002092:	fab3 f383 	clz	r3, r3
 8002096:	b2db      	uxtb	r3, r3
 8002098:	095b      	lsrs	r3, r3, #5
 800209a:	b2db      	uxtb	r3, r3
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d102      	bne.n	80020ac <HAL_RCC_ClockConfig+0x1a0>
 80020a6:	4b31      	ldr	r3, [pc, #196]	; (800216c <HAL_RCC_ClockConfig+0x260>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	e00d      	b.n	80020c8 <HAL_RCC_ClockConfig+0x1bc>
 80020ac:	2302      	movs	r3, #2
 80020ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b2:	fa93 f3a3 	rbit	r3, r3
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
 80020b8:	2302      	movs	r3, #2
 80020ba:	623b      	str	r3, [r7, #32]
 80020bc:	6a3b      	ldr	r3, [r7, #32]
 80020be:	fa93 f3a3 	rbit	r3, r3
 80020c2:	61fb      	str	r3, [r7, #28]
 80020c4:	4b29      	ldr	r3, [pc, #164]	; (800216c <HAL_RCC_ClockConfig+0x260>)
 80020c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c8:	2202      	movs	r2, #2
 80020ca:	61ba      	str	r2, [r7, #24]
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	fa92 f2a2 	rbit	r2, r2
 80020d2:	617a      	str	r2, [r7, #20]
  return result;
 80020d4:	697a      	ldr	r2, [r7, #20]
 80020d6:	fab2 f282 	clz	r2, r2
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	f042 0220 	orr.w	r2, r2, #32
 80020e0:	b2d2      	uxtb	r2, r2
 80020e2:	f002 021f 	and.w	r2, r2, #31
 80020e6:	2101      	movs	r1, #1
 80020e8:	fa01 f202 	lsl.w	r2, r1, r2
 80020ec:	4013      	ands	r3, r2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e079      	b.n	80021ea <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020f6:	4b1d      	ldr	r3, [pc, #116]	; (800216c <HAL_RCC_ClockConfig+0x260>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f023 0203 	bic.w	r2, r3, #3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	491a      	ldr	r1, [pc, #104]	; (800216c <HAL_RCC_ClockConfig+0x260>)
 8002104:	4313      	orrs	r3, r2
 8002106:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002108:	f7fe fc22 	bl	8000950 <HAL_GetTick>
 800210c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800210e:	e00a      	b.n	8002126 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002110:	f7fe fc1e 	bl	8000950 <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	f241 3288 	movw	r2, #5000	; 0x1388
 800211e:	4293      	cmp	r3, r2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e061      	b.n	80021ea <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002126:	4b11      	ldr	r3, [pc, #68]	; (800216c <HAL_RCC_ClockConfig+0x260>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f003 020c 	and.w	r2, r3, #12
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	429a      	cmp	r2, r3
 8002136:	d1eb      	bne.n	8002110 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002138:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <HAL_RCC_ClockConfig+0x25c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0307 	and.w	r3, r3, #7
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	429a      	cmp	r2, r3
 8002144:	d214      	bcs.n	8002170 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002146:	4b08      	ldr	r3, [pc, #32]	; (8002168 <HAL_RCC_ClockConfig+0x25c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f023 0207 	bic.w	r2, r3, #7
 800214e:	4906      	ldr	r1, [pc, #24]	; (8002168 <HAL_RCC_ClockConfig+0x25c>)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	4313      	orrs	r3, r2
 8002154:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002156:	4b04      	ldr	r3, [pc, #16]	; (8002168 <HAL_RCC_ClockConfig+0x25c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	429a      	cmp	r2, r3
 8002162:	d005      	beq.n	8002170 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e040      	b.n	80021ea <HAL_RCC_ClockConfig+0x2de>
 8002168:	40022000 	.word	0x40022000
 800216c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	2b00      	cmp	r3, #0
 800217a:	d008      	beq.n	800218e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800217c:	4b1d      	ldr	r3, [pc, #116]	; (80021f4 <HAL_RCC_ClockConfig+0x2e8>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	491a      	ldr	r1, [pc, #104]	; (80021f4 <HAL_RCC_ClockConfig+0x2e8>)
 800218a:	4313      	orrs	r3, r2
 800218c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0308 	and.w	r3, r3, #8
 8002196:	2b00      	cmp	r3, #0
 8002198:	d009      	beq.n	80021ae <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800219a:	4b16      	ldr	r3, [pc, #88]	; (80021f4 <HAL_RCC_ClockConfig+0x2e8>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4912      	ldr	r1, [pc, #72]	; (80021f4 <HAL_RCC_ClockConfig+0x2e8>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80021ae:	f000 f829 	bl	8002204 <HAL_RCC_GetSysClockFreq>
 80021b2:	4601      	mov	r1, r0
 80021b4:	4b0f      	ldr	r3, [pc, #60]	; (80021f4 <HAL_RCC_ClockConfig+0x2e8>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021bc:	22f0      	movs	r2, #240	; 0xf0
 80021be:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	fa92 f2a2 	rbit	r2, r2
 80021c6:	60fa      	str	r2, [r7, #12]
  return result;
 80021c8:	68fa      	ldr	r2, [r7, #12]
 80021ca:	fab2 f282 	clz	r2, r2
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	40d3      	lsrs	r3, r2
 80021d2:	4a09      	ldr	r2, [pc, #36]	; (80021f8 <HAL_RCC_ClockConfig+0x2ec>)
 80021d4:	5cd3      	ldrb	r3, [r2, r3]
 80021d6:	fa21 f303 	lsr.w	r3, r1, r3
 80021da:	4a08      	ldr	r2, [pc, #32]	; (80021fc <HAL_RCC_ClockConfig+0x2f0>)
 80021dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80021de:	4b08      	ldr	r3, [pc, #32]	; (8002200 <HAL_RCC_ClockConfig+0x2f4>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe fb70 	bl	80008c8 <HAL_InitTick>
  
  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3778      	adds	r7, #120	; 0x78
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40021000 	.word	0x40021000
 80021f8:	08002354 	.word	0x08002354
 80021fc:	200003f8 	.word	0x200003f8
 8002200:	200003fc 	.word	0x200003fc

08002204 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002204:	b480      	push	{r7}
 8002206:	b08b      	sub	sp, #44	; 0x2c
 8002208:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800220a:	2300      	movs	r3, #0
 800220c:	61fb      	str	r3, [r7, #28]
 800220e:	2300      	movs	r3, #0
 8002210:	61bb      	str	r3, [r7, #24]
 8002212:	2300      	movs	r3, #0
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
 8002216:	2300      	movs	r3, #0
 8002218:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800221a:	2300      	movs	r3, #0
 800221c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800221e:	4b29      	ldr	r3, [pc, #164]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	f003 030c 	and.w	r3, r3, #12
 800222a:	2b04      	cmp	r3, #4
 800222c:	d002      	beq.n	8002234 <HAL_RCC_GetSysClockFreq+0x30>
 800222e:	2b08      	cmp	r3, #8
 8002230:	d003      	beq.n	800223a <HAL_RCC_GetSysClockFreq+0x36>
 8002232:	e03c      	b.n	80022ae <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002234:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002236:	623b      	str	r3, [r7, #32]
      break;
 8002238:	e03c      	b.n	80022b4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002240:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002244:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002246:	68ba      	ldr	r2, [r7, #8]
 8002248:	fa92 f2a2 	rbit	r2, r2
 800224c:	607a      	str	r2, [r7, #4]
  return result;
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	fab2 f282 	clz	r2, r2
 8002254:	b2d2      	uxtb	r2, r2
 8002256:	40d3      	lsrs	r3, r2
 8002258:	4a1c      	ldr	r2, [pc, #112]	; (80022cc <HAL_RCC_GetSysClockFreq+0xc8>)
 800225a:	5cd3      	ldrb	r3, [r2, r3]
 800225c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800225e:	4b19      	ldr	r3, [pc, #100]	; (80022c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002262:	f003 030f 	and.w	r3, r3, #15
 8002266:	220f      	movs	r2, #15
 8002268:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	fa92 f2a2 	rbit	r2, r2
 8002270:	60fa      	str	r2, [r7, #12]
  return result;
 8002272:	68fa      	ldr	r2, [r7, #12]
 8002274:	fab2 f282 	clz	r2, r2
 8002278:	b2d2      	uxtb	r2, r2
 800227a:	40d3      	lsrs	r3, r2
 800227c:	4a14      	ldr	r2, [pc, #80]	; (80022d0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800227e:	5cd3      	ldrb	r3, [r2, r3]
 8002280:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d008      	beq.n	800229e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800228c:	4a0e      	ldr	r2, [pc, #56]	; (80022c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	fbb2 f2f3 	udiv	r2, r2, r3
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	fb02 f303 	mul.w	r3, r2, r3
 800229a:	627b      	str	r3, [r7, #36]	; 0x24
 800229c:	e004      	b.n	80022a8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	4a0c      	ldr	r2, [pc, #48]	; (80022d4 <HAL_RCC_GetSysClockFreq+0xd0>)
 80022a2:	fb02 f303 	mul.w	r3, r2, r3
 80022a6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	623b      	str	r3, [r7, #32]
      break;
 80022ac:	e002      	b.n	80022b4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022ae:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80022b0:	623b      	str	r3, [r7, #32]
      break;
 80022b2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022b4:	6a3b      	ldr	r3, [r7, #32]
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	372c      	adds	r7, #44	; 0x2c
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40021000 	.word	0x40021000
 80022c8:	007a1200 	.word	0x007a1200
 80022cc:	08002364 	.word	0x08002364
 80022d0:	08002374 	.word	0x08002374
 80022d4:	003d0900 	.word	0x003d0900

080022d8 <__libc_init_array>:
 80022d8:	b570      	push	{r4, r5, r6, lr}
 80022da:	4d0d      	ldr	r5, [pc, #52]	; (8002310 <__libc_init_array+0x38>)
 80022dc:	4c0d      	ldr	r4, [pc, #52]	; (8002314 <__libc_init_array+0x3c>)
 80022de:	1b64      	subs	r4, r4, r5
 80022e0:	10a4      	asrs	r4, r4, #2
 80022e2:	2600      	movs	r6, #0
 80022e4:	42a6      	cmp	r6, r4
 80022e6:	d109      	bne.n	80022fc <__libc_init_array+0x24>
 80022e8:	4d0b      	ldr	r5, [pc, #44]	; (8002318 <__libc_init_array+0x40>)
 80022ea:	4c0c      	ldr	r4, [pc, #48]	; (800231c <__libc_init_array+0x44>)
 80022ec:	f000 f820 	bl	8002330 <_init>
 80022f0:	1b64      	subs	r4, r4, r5
 80022f2:	10a4      	asrs	r4, r4, #2
 80022f4:	2600      	movs	r6, #0
 80022f6:	42a6      	cmp	r6, r4
 80022f8:	d105      	bne.n	8002306 <__libc_init_array+0x2e>
 80022fa:	bd70      	pop	{r4, r5, r6, pc}
 80022fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002300:	4798      	blx	r3
 8002302:	3601      	adds	r6, #1
 8002304:	e7ee      	b.n	80022e4 <__libc_init_array+0xc>
 8002306:	f855 3b04 	ldr.w	r3, [r5], #4
 800230a:	4798      	blx	r3
 800230c:	3601      	adds	r6, #1
 800230e:	e7f2      	b.n	80022f6 <__libc_init_array+0x1e>
 8002310:	08002384 	.word	0x08002384
 8002314:	08002384 	.word	0x08002384
 8002318:	08002384 	.word	0x08002384
 800231c:	08002388 	.word	0x08002388

08002320 <memset>:
 8002320:	4402      	add	r2, r0
 8002322:	4603      	mov	r3, r0
 8002324:	4293      	cmp	r3, r2
 8002326:	d100      	bne.n	800232a <memset+0xa>
 8002328:	4770      	bx	lr
 800232a:	f803 1b01 	strb.w	r1, [r3], #1
 800232e:	e7f9      	b.n	8002324 <memset+0x4>

08002330 <_init>:
 8002330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002332:	bf00      	nop
 8002334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002336:	bc08      	pop	{r3}
 8002338:	469e      	mov	lr, r3
 800233a:	4770      	bx	lr

0800233c <_fini>:
 800233c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800233e:	bf00      	nop
 8002340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002342:	bc08      	pop	{r3}
 8002344:	469e      	mov	lr, r3
 8002346:	4770      	bx	lr
